"use strict";(self.webpackChunkspec_website=self.webpackChunkspec_website||[]).push([[835],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},l=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},k="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},N=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),k=m(a),N=r,c=k["".concat(o,".").concat(N)]||k[N]||d[N]||i;return a?n.createElement(c,p(p({ref:t},l),{},{components:a})):n.createElement(c,p({ref:t},l))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,p=new Array(i);p[0]=N;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[k]="string"==typeof e?e:r,p[1]=s;for(var m=2;m<i;m++)p[m]=a[m];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}N.displayName="MDXCreateElement"},9754:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const i={title:"Appendix B: Host API"},p=void 0,s={unversionedId:"chap-host-api",id:"chap-host-api",title:"Appendix B: Host API",description:"Description of the expected environment available for import by the Polkadot Runtime",source:"@site/docs/chap-host-api.md",sourceDirName:".",slug:"/chap-host-api",permalink:"/chap-host-api",draft:!1,unlisted:!1,editUrl:"https://github.com/w3f/polkadot-spec/blob/main/src/docs/chap-host-api.md",tags:[],version:"current",frontMatter:{title:"Appendix B: Host API"},sidebar:"tutorialSidebar",previous:{title:"Appendix A: Cryptography & Encoding",permalink:"/id-cryptography-encoding"},next:{title:"Appendix C: Runtime API",permalink:"/chap-runtime-api"}},o={},m=[{value:"B.1. Preliminaries",id:"id-preliminaries-4",level:2},{value:"Definition 194. Exposed Host API",id:"defn-host-api-at-state",level:6},{value:"Definition 195. Runtime Pointer",id:"defn-runtime-pointer",level:6},{value:"Definition 196. Runtime Pointer Size",id:"defn-runtime-pointer-size",level:6},{value:"Definition 197. Lexicographic ordering",id:"defn-lexicographic-ordering",level:6},{value:"B.2. Storage",id:"sect-storage-api",level:2},{value:"Definition 198. State Version",id:"defn-state-version",level:6},{value:"B.2.1. <code>ext_storage_set</code>",id:"sect-storage-set",level:3},{value:"B.2.1.1. Version 1 - Prototype",id:"id-version-1-prototype",level:4},{value:"B.2.2. <code>ext_storage_get</code>",id:"id-ext_storage_get",level:3},{value:"B.2.2.1. Version 1 - Prototype",id:"id-version-1-prototype-2",level:4},{value:"B.2.3. <code>ext_storage_read</code>",id:"id-ext_storage_read",level:3},{value:"B.2.3.1. Version 1 - Prototype",id:"id-version-1-prototype-3",level:4},{value:"B.2.4. <code>ext_storage_clear</code>",id:"id-ext_storage_clear",level:3},{value:"B.2.4.1. Version 1 - Prototype",id:"id-version-1-prototype-4",level:4},{value:"B.2.5. <code>ext_storage_exists</code>",id:"id-ext_storage_exists",level:3},{value:"B.2.5.1. Version 1 - Prototype",id:"id-version-1-prototype-5",level:4},{value:"B.2.6. <code>ext_storage_clear_prefix</code>",id:"id-ext_storage_clear_prefix",level:3},{value:"B.2.6.1. Version 1 - Prototype",id:"id-version-1-prototype-6",level:4},{value:"B.2.6.2. Version 2 - Prototype",id:"id-version-2-prototype",level:4},{value:"B.2.7. <code>ext_storage_append</code>",id:"id-ext_storage_append",level:3},{value:"B.2.7.1. Version 1 - Prototype",id:"id-version-1-prototype-7",level:4},{value:"B.2.8. <code>ext_storage_root</code>",id:"id-ext_storage_root",level:3},{value:"B.2.8.1. Version 1 - Prototype",id:"sect-ext-storage-root-version-1",level:4},{value:"B.2.8.2. Version 2 - Prototype",id:"sect-ext-storage-root-version-2",level:4},{value:"B.2.9. <code>ext_storage_changes_root</code>",id:"sect-ext-storage-changes-root",level:3},{value:"B.2.9.1. Version 1 - Prototype",id:"id-version-1-prototype-8",level:4},{value:"B.2.10. <code>ext_storage_next_key</code>",id:"id-ext_storage_next_key",level:3},{value:"B.2.10.1. Version 1 - Prototype",id:"id-version-1-prototype-9",level:4},{value:"B.2.11. <code>ext_storage_start_transaction</code>",id:"sect-ext-storage-start-transaction",level:3},{value:"B.2.11.1. Version 1 - Prototype",id:"id-version-1-prototype-10",level:4},{value:"B.2.12. <code>ext_storage_rollback_transaction</code>",id:"sect-ext-storage-rollback-transaction",level:3},{value:"B.2.12.1. Version 1 - Prototype",id:"id-version-1-prototype-11",level:4},{value:"B.2.13. <code>ext_storage_commit_transaction</code>",id:"sect-ext-storage-commit-transaction",level:3},{value:"B.2.13.1. Version 1 - Prototype",id:"id-version-1-prototype-12",level:4},{value:"B.3. Child Storage",id:"sect-child-storage-api",level:2},{value:"Definition 199. Child Storage",id:"defn-child-storage-type",level:6},{value:"B.3.1. <code>ext_default_child_storage_set</code>",id:"id-ext_default_child_storage_set",level:3},{value:"B.3.1.1. Version 1 - Prototype",id:"id-version-1-prototype-13",level:4},{value:"B.3.2. <code>ext_default_child_storage_get</code>",id:"id-ext_default_child_storage_get",level:3},{value:"B.3.2.1. Version 1 - Prototype",id:"id-version-1-prototype-14",level:4},{value:"B.3.3. <code>ext_default_child_storage_read</code>",id:"id-ext_default_child_storage_read",level:3},{value:"B.3.3.1. Version 1 - Prototype",id:"id-version-1-prototype-15",level:4},{value:"B.3.4. <code>ext_default_child_storage_clear</code>",id:"id-ext_default_child_storage_clear",level:3},{value:"B.3.4.1. Version 1 - Prototype",id:"id-version-1-prototype-16",level:4},{value:"B.3.5. <code>ext_default_child_storage_storage_kill</code>",id:"id-ext_default_child_storage_storage_kill",level:3},{value:"B.3.5.1. Version 1 - Prototype",id:"id-version-1-prototype-17",level:4},{value:"B.3.5.2. Version 2 - Prototype",id:"id-version-2-prototype-2",level:4},{value:"B.3.5.3. Version 3 - Prototype",id:"id-version-3-prototype",level:4},{value:"B.3.6. <code>ext_default_child_storage_exists</code>",id:"id-ext_default_child_storage_exists",level:3},{value:"B.3.6.1. Version 1 - Prototype",id:"id-version-1-prototype-18",level:4},{value:"B.3.7. <code>ext_default_child_storage_clear_prefix</code>",id:"id-ext_default_child_storage_clear_prefix",level:3},{value:"B.3.7.1. Version 1 - Prototype",id:"id-version-1-prototype-19",level:4},{value:"B.3.7.2. Version 2 - Prototype",id:"id-version-2-prototype-3",level:4},{value:"B.3.8. <code>ext_default_child_storage_root</code>",id:"id-ext_default_child_storage_root",level:3},{value:"B.3.8.1. Version 1 - Prototype",id:"id-version-1-prototype-20",level:4},{value:"B.3.8.2. Version 2 - Prototype",id:"id-version-2-prototype-4",level:4},{value:"B.3.9. <code>ext_default_child_storage_next_key</code>",id:"id-ext_default_child_storage_next_key",level:3},{value:"B.3.9.1. Version 1 - Prototype",id:"id-version-1-prototype-21",level:4},{value:"B.4. Crypto",id:"sect-crypto-api",level:2},{value:"Definition 200. Key Type Identifier",id:"defn-key-type-id",level:6},{value:"Definition 201. ECDSA Verify Error",id:"defn-ecdsa-verify-error",level:6},{value:"B.4.1. <code>ext_crypto_ed25519_public_keys</code>",id:"id-ext_crypto_ed25519_public_keys",level:3},{value:"B.4.1.1. Version 1 - Prototype",id:"id-version-1-prototype-22",level:4},{value:"B.4.2. <code>ext_crypto_ed25519_generate</code>",id:"id-ext_crypto_ed25519_generate",level:3},{value:"B.4.2.1. Version 1 - Prototype",id:"id-version-1-prototype-23",level:4},{value:"B.4.3. <code>ext_crypto_ed25519_sign</code>",id:"id-ext_crypto_ed25519_sign",level:3},{value:"B.4.3.1. Version 1 - Prototype",id:"id-version-1-prototype-24",level:4},{value:"B.4.4. <code>ext_crypto_ed25519_verify</code>",id:"sect-ext-crypto-ed25519-verify",level:3},{value:"B.4.4.1. Version 1 - Prototype",id:"id-version-1-prototype-25",level:4},{value:"B.4.5. <code>ext_crypto_ed25519_batch_verify</code>",id:"sect-ext-crypto-ed25519-batch-verify",level:3},{value:"B.4.5.1. Version 1",id:"id-version-1",level:4},{value:"B.4.6. <code>ext_crypto_sr25519_public_keys</code>",id:"id-ext_crypto_sr25519_public_keys",level:3},{value:"B.4.6.1. Version 1 - Prototype",id:"id-version-1-prototype-26",level:4},{value:"B.4.7. <code>ext_crypto_sr25519_generate</code>",id:"id-ext_crypto_sr25519_generate",level:3},{value:"B.4.7.1. Version 1 - Prototype",id:"id-version-1-prototype-27",level:4},{value:"B.4.8. <code>ext_crypto_sr25519_sign</code>",id:"id-ext_crypto_sr25519_sign",level:3},{value:"B.4.8.1. Version 1 - Prototype",id:"id-version-1-prototype-28",level:4},{value:"B.4.9. <code>ext_crypto_sr25519_verify</code>",id:"sect-ext-crypto-sr25519-verify",level:3},{value:"B.4.9.1. Version 1 - Prototype",id:"id-version-1-prototype-29",level:4},{value:"B.4.9.2. Version 2 - Prototype",id:"id-version-2-prototype-5",level:4},{value:"B.4.10. <code>ext_crypto_sr25519_batch_verify</code>",id:"sect-ext-crypto-sr25519-batch-verify",level:3},{value:"B.4.10.1. Version 1",id:"id-version-1-2",level:4},{value:"B.4.11. <code>ext_crypto_ecdsa_public_keys</code>",id:"id-ext_crypto_ecdsa_public_keys",level:3},{value:"B.4.11.1. Version 1 - Prototype",id:"id-version-1-prototype-30",level:4},{value:"B.4.12. <code>ext_crypto_ecdsa_generate</code>",id:"id-ext_crypto_ecdsa_generate",level:3},{value:"B.4.12.1. Version 1 - Prototype",id:"id-version-1-prototype-31",level:4},{value:"B.4.13. <code>ext_crypto_ecdsa_sign</code>",id:"id-ext_crypto_ecdsa_sign",level:3},{value:"B.4.13.1. Version 1 - Prototype",id:"id-version-1-prototype-32",level:4},{value:"B.4.14. <code>ext_crypto_ecdsa_sign_prehashed</code>",id:"id-ext_crypto_ecdsa_sign_prehashed",level:3},{value:"B.4.14.1. Version 1 - Prototype",id:"id-version-1-prototype-33",level:4},{value:"B.4.15. <code>ext_crypto_ecdsa_verify</code>",id:"sect-ext-crypto-ecdsa-verify",level:3},{value:"B.4.15.1. Version 1 - Prototype",id:"id-version-1-prototype-34",level:4},{value:"B.4.15.2. Version 2 - Prototype",id:"id-version-2-prototype-6",level:4},{value:"B.4.16. <code>ext_crypto_ecdsa_verify_prehashed</code>",id:"id-ext_crypto_ecdsa_verify_prehashed",level:3},{value:"B.4.16.1. Version 1 - Prototype",id:"id-version-1-prototype-35",level:4},{value:"B.4.17. <code>ext_crypto_ecdsa_batch_verify</code>",id:"sect-ext-crypto-ecdsa-batch-verify",level:3},{value:"B.4.17.1. Version 1",id:"id-version-1-3",level:4},{value:"B.4.18. <code>ext_crypto_secp256k1_ecdsa_recover</code>",id:"id-ext_crypto_secp256k1_ecdsa_recover",level:3},{value:"B.4.18.1. Version 1 - Prototype",id:"id-version-1-prototype-36",level:4},{value:"B.4.18.2. Version 2 - Prototype",id:"id-version-2-prototype-7",level:4},{value:"B.4.19. <code>ext_crypto_secp256k1_ecdsa_recover_compressed</code>",id:"id-ext_crypto_secp256k1_ecdsa_recover_compressed",level:3},{value:"B.4.19.1. Version 1 - Prototype",id:"id-version-1-prototype-37",level:4},{value:"B.4.19.2. Version 2 - Prototype",id:"id-version-2-prototype-8",level:4},{value:"B.4.20. <code>ext_crypto_start_batch_verify</code>",id:"sect-ext-crypto-start-batch-verify",level:3},{value:"B.4.20.1. Version 1 - Prototype",id:"id-version-1-prototype-38",level:4},{value:"B.4.21. <code>ext_crypto_finish_batch_verify</code>",id:"sect-ext-crypto-finish-batch-verify",level:3},{value:"B.4.21.1. Version 1 - Prototype",id:"id-version-1-prototype-39",level:4},{value:"B.5. Hashing",id:"sect-hashing-api",level:2},{value:"B.5.1. <code>ext_hashing_keccak_256</code>",id:"id-ext_hashing_keccak_256",level:3},{value:"B.5.1.1. Version 1 - Prototype",id:"id-version-1-prototype-40",level:4},{value:"B.5.2. <code>ext_hashing_keccak_512</code>",id:"id-ext_hashing_keccak_512",level:3},{value:"B.5.2.1. Version 1 - Prototype",id:"id-version-1-prototype-41",level:4},{value:"B.5.3. <code>ext_hashing_sha2_256</code>",id:"id-ext_hashing_sha2_256",level:3},{value:"B.5.3.1. Version 1 - Prototype",id:"id-version-1-prototype-42",level:4},{value:"B.5.4. <code>ext_hashing_blake2_128</code>",id:"id-ext_hashing_blake2_128",level:3},{value:"B.5.4.1. Version 1 - Prototype",id:"id-version-1-prototype-43",level:4},{value:"B.5.5. <code>ext_hashing_blake2_256</code>",id:"id-ext_hashing_blake2_256",level:3},{value:"B.5.5.1. Version 1 - Prototype",id:"id-version-1-prototype-44",level:4},{value:"B.5.6. <code>ext_hashing_twox_64</code>",id:"id-ext_hashing_twox_64",level:3},{value:"B.5.6.1. Version 1 - Prototype",id:"id-version-1-prototype-45",level:4},{value:"B.5.7. <code>ext_hashing_twox_128</code>",id:"id-ext_hashing_twox_128",level:3},{value:"B.5.7.1. Version 1 - Prototype",id:"id-version-1-prototype-46",level:4},{value:"B.5.8. <code>ext_hashing_twox_256</code>",id:"id-ext_hashing_twox_256",level:3},{value:"B.5.8.1. Version 1 - Prototype",id:"id-version-1-prototype-47",level:4},{value:"B.6. Offchain",id:"sect-offchain-api",level:2},{value:"Definition 202. Persisted Storage",id:"defn-offchain-persistent-storage",level:6},{value:"Definition 203. Local Storage",id:"defn-offchain-local-storage",level:6},{value:"Definition 204. HTTP Status Code",id:"defn-http-status-code",level:6},{value:"Definition 205. HTTP Error",id:"defn-http-error",level:6},{value:"B.6.1. <code>ext_offchain_is_validator</code>",id:"id-ext_offchain_is_validator",level:3},{value:"B.6.1.1. Version 1 - Prototype",id:"id-version-1-prototype-48",level:4},{value:"B.6.2. <code>ext_offchain_submit_transaction</code>",id:"sect-ext-offchain-submit-transaction",level:3},{value:"B.6.2.1. Version 1 - Prototype",id:"id-version-1-prototype-49",level:4},{value:"B.6.3. <code>ext_offchain_network_state</code>",id:"id-ext_offchain_network_state",level:3},{value:"Definition 206. Opaque Network State",id:"defn-opaque-network-state",level:6},{value:"B.6.3.1. Version 1 - Prototype",id:"id-version-1-prototype-50",level:4},{value:"B.6.4. <code>ext_offchain_timestamp</code>",id:"id-ext_offchain_timestamp",level:3},{value:"B.6.4.1. Version 1 - Prototype",id:"id-version-1-prototype-51",level:4},{value:"B.6.5. <code>ext_offchain_sleep_until</code>",id:"id-ext_offchain_sleep_until",level:3},{value:"B.6.5.1. Version 1 - Prototype",id:"id-version-1-prototype-52",level:4},{value:"B.6.6. <code>ext_offchain_random_seed</code>",id:"id-ext_offchain_random_seed",level:3},{value:"B.6.6.1. Version 1 - Prototype",id:"id-version-1-prototype-53",level:4},{value:"B.6.7. <code>ext_offchain_local_storage_set</code>",id:"id-ext_offchain_local_storage_set",level:3},{value:"B.6.7.1. Version 1 - Prototype",id:"id-version-1-prototype-54",level:4},{value:"B.6.8. <code>ext_offchain_local_storage_clear</code>",id:"id-ext_offchain_local_storage_clear",level:3},{value:"B.6.8.1. Version 1 - Prototype",id:"id-version-1-prototype-55",level:4},{value:"B.6.9. <code>ext_offchain_local_storage_compare_and_set</code>",id:"id-ext_offchain_local_storage_compare_and_set",level:3},{value:"B.6.9.1. Version 1 - Prototype",id:"id-version-1-prototype-56",level:4},{value:"B.6.10. <code>ext_offchain_local_storage_get</code>",id:"id-ext_offchain_local_storage_get",level:3},{value:"B.6.10.1. Version 1 - Prototype",id:"id-version-1-prototype-57",level:4},{value:"B.6.11. <code>ext_offchain_http_request_start</code>",id:"id-ext_offchain_http_request_start",level:3},{value:"B.6.11.1. Version 1 - Prototype",id:"id-version-1-prototype-58",level:4},{value:"B.6.12. <code>ext_offchain_http_request_add_header</code>",id:"id-ext_offchain_http_request_add_header",level:3},{value:"B.6.12.1. Version 1 - Prototype",id:"id-version-1-prototype-59",level:4},{value:"B.6.13. <code>ext_offchain_http_request_write_body</code>",id:"id-ext_offchain_http_request_write_body",level:3},{value:"B.6.13.1. Version 1 - Prototype",id:"id-version-1-prototype-60",level:4},{value:"B.6.14. <code>ext_offchain_http_response_wait</code>",id:"id-ext_offchain_http_response_wait",level:3},{value:"B.6.14.1. Version 1 - Prototype",id:"id-version-1-prototype-61",level:4},{value:"B.6.15. <code>ext_offchain_http_response_headers</code>",id:"id-ext_offchain_http_response_headers",level:3},{value:"B.6.15.1. Version 1 - Prototype",id:"id-version-1-prototype-62",level:4},{value:"B.6.16. <code>ext_offchain_http_response_read_body</code>",id:"id-ext_offchain_http_response_read_body",level:3},{value:"B.6.16.1. Version 1 - Prototype",id:"id-version-1-prototype-63",level:4},{value:"B.7. Offchain Index",id:"sect-offchainindex-api",level:2},{value:"B.7.1. <code>Offchain_index_set</code>",id:"id-offchain_index_set",level:3},{value:"B.7.1.1. Version 1 - Prototype",id:"id-version-1-prototype-Offchain_index_set",level:4},{value:"B.7.2. <code>Offchain_index_clear</code>",id:"id-offchain_index_clear",level:3},{value:"B.7.2.1. Version 1 - Prototype",id:"id-version-1-prototype-Offchain_index_clear",level:4},{value:"B.8. Trie",id:"sect-trie-api",level:2},{value:"B.8.1. <code>ext_trie_blake2_256_root</code>",id:"id-ext_trie_blake2_256_root",level:3},{value:"B.8.1.1. Version 1 - Prototype",id:"id-version-1-prototype-64",level:4},{value:"B.8.1.2. Version 2 - Prototype",id:"id-version-2-prototype-9",level:4},{value:"B.8.2. <code>ext_trie_blake2_256_ordered_root</code>",id:"id-ext_trie_blake2_256_ordered_root",level:3},{value:"B.8.2.1. Version 1 - Prototype",id:"id-version-1-prototype-65",level:4},{value:"B.8.2.2. Version 2 - Prototype",id:"id-version-2-prototype-10",level:4},{value:"B.8.3. <code>ext_trie_keccak_256_root</code>",id:"id-ext_trie_keccak_256_root",level:3},{value:"B.8.3.1. Version 1 - Prototype",id:"id-version-1-prototype-66",level:4},{value:"B.8.3.2. Version 2 - Prototype",id:"id-version-2-prototype-11",level:4},{value:"B.8.4. <code>ext_trie_keccak_256_ordered_root</code>",id:"id-ext_trie_keccak_256_ordered_root",level:3},{value:"B.8.4.1. Version 1 - Prototype",id:"id-version-1-prototype-67",level:4},{value:"B.8.4.2. Version 2 - Prototype",id:"id-version-2-prototype-12",level:4},{value:"B.8.5. <code>ext_trie_blake2_256_verify_proof</code>",id:"id-ext_trie_blake2_256_verify_proof",level:3},{value:"B.8.5.1. Version 1 - Prototype",id:"id-version-1-prototype-68",level:4},{value:"B.8.5.2. Version 2 - Prototype",id:"id-version-2-prototype-13",level:4},{value:"B.8.6. <code>ext_trie_keccak_256_verify_proof</code>",id:"id-ext_trie_keccak_256_verify_proof",level:3},{value:"B.8.6.1. Version 1 - Prototype",id:"id-version-1-prototype-69",level:4},{value:"B.8.6.2. Version 2 - Prototype",id:"id-version-2-prototype-14",level:4},{value:"B.9. Miscellaneous",id:"sect-misc-api",level:2},{value:"B.9.1. <code>ext_misc_print_num</code>",id:"id-ext_misc_print_num",level:3},{value:"B.9.1.1. Version 1 - Prototype",id:"id-version-1-prototype-70",level:4},{value:"B.9.2. <code>ext_misc_print_utf8</code>",id:"id-ext_misc_print_utf8",level:3},{value:"B.9.2.1. Version 1 - Prototype",id:"id-version-1-prototype-71",level:4},{value:"B.9.3. <code>ext_misc_print_hex</code>",id:"id-ext_misc_print_hex",level:3},{value:"B.9.3.1. Version 1 - Prototype",id:"id-version-1-prototype-72",level:4},{value:"B.9.4. <code>ext_misc_runtime_version</code>",id:"id-ext_misc_runtime_version",level:3},{value:"B.9.4.1. Version 1 - Prototype",id:"id-version-1-prototype-73",level:4},{value:"B.10. Allocator",id:"sect-allocator-api",level:2},{value:"B.10.1. <code>ext_allocator_malloc</code>",id:"id-ext_allocator_malloc",level:3},{value:"B.10.1.1. Version 1 - Prototype",id:"id-version-1-prototype-74",level:4},{value:"B.10.2. <code>ext_allocator_free</code>",id:"id-ext_allocator_free",level:3},{value:"B.10.2.1. Version 1 - Prototype",id:"id-version-1-prototype-75",level:4},{value:"B.11. Logging",id:"sect-logging-api",level:2},{value:"Definition 207. Log Level",id:"defn-logging-log-level",level:6},{value:"B.11.1. <code>ext_logging_log</code>",id:"id-ext_logging_log",level:3},{value:"B.11.1.1. Version 1 - Prototype",id:"id-version-1-prototype-76",level:4},{value:"B.11.2. <code>ext_logging_max_level</code>",id:"id-ext_logging_max_level",level:3},{value:"B.11.2.1. Version 1 - Prototype",id:"id-version-1-prototype-max_level",level:4},{value:"B.12. Abort Handler",id:"id-abort-handler",level:2},{value:"B.12.1. <code>ext_panic_handler_abort_on_panic</code>",id:"id-ext_panic_handler_abort_on_panic",level:3},{value:"B.12.1.1. Version 1 - Prototype",id:"id-version-1-prototype-77",level:4}],l={toc:m},k="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(k,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Description of the expected environment available for import by the Polkadot Runtime"),(0,r.kt)("h2",{id:"id-preliminaries-4"},"B.1. Preliminaries"),(0,r.kt)("p",null,"The Polkadot Host API is a set of functions that the Polkadot Host exposes to Runtime to access external functions needed for various reasons, such as the Storage of the content, access and manipulation, memory allocation, and also efficiency. The encoding of each data type is specified or referenced in this section. If the encoding is not mentioned, then the default Wasm encoding is used, such as little-endian byte ordering for integers."),(0,r.kt)("h6",{id:"defn-host-api-at-state"},"Definition 194. Exposed Host API"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},"By ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mtext",{parentName:"msub"},"RE"),(0,r.kt)("mi",{parentName:"msub"},"B"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\text{RE}_{{B}}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"RE")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3283em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.05017em"}},"B")))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"}))))))))))," we refer to the API exposed by the Polkadot Host, which interacts, manipulates, and responds based on the state storage whose state is set at the end of the execution of block ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"B")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{B}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"B")))))),".")),(0,r.kt)("h6",{id:"defn-runtime-pointer"},"Definition 195. Runtime Pointer"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},"Runtime pointer")," type is an unsigned 32-bit integer representing a pointer to data in memory. This pointer is the primary way to exchange data of fixed/known size between the Runtime and Polkadot Host.")),(0,r.kt)("h6",{id:"defn-runtime-pointer-size"},"Definition 196. Runtime Pointer Size"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},"Runtime pointer-size")," type is an unsigned 64-bit integer representing two consecutive integers. The least significant is ",(0,r.kt)("strong",{parentName:"p"},"Runtime pointer")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),"). The most significant provides the size of the data in bytes. This representation is the primary way to exchange data of arbitrary/dynamic sizes between the Runtime and the Polkadot Host.")),(0,r.kt)("h6",{id:"defn-lexicographic-ordering"},"Definition 197. Lexicographic ordering"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Lexicographic ordering")," refers to the ascending ordering of bytes or byte arrays, such as:"),(0,r.kt)("div",{parentName:"admonition",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"["),(0,r.kt)("mn",{parentName:"mrow"},"0"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mn",{parentName:"mrow"},"0"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mn",{parentName:"mrow"},"2"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"]")),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"["),(0,r.kt)("mn",{parentName:"mrow"},"0"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"]")),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"["),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"]")),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"["),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mn",{parentName:"mrow"},"0"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"]")),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"["),(0,r.kt)("mn",{parentName:"mrow"},"2"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"]")),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"["),(0,r.kt)("mo",{parentName:"mrow"},"\u2026"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"]"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{\\left[{0},{0},{2}\\right]}<{\\left[{0},{1},{1}\\right]}<{\\left[{1}\\right]}<{\\left[{1},{1},{0}\\right]}<{\\left[{2}\\right]}<{\\left[\\ldots\\right]}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"["),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"2")),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"]"))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"["),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1")),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1")),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"]"))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"["),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1")),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"]"))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"["),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1")),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1")),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"]"))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"["),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"2")),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"]"))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"["),(0,r.kt)("span",{parentName:"span",className:"minner"},"\u2026"),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"]")))))))),(0,r.kt)("p",{parentName:"admonition"},"The functions are specified in each subsequent subsection for each category of those functions.")),(0,r.kt)("h2",{id:"sect-storage-api"},"B.2. Storage"),(0,r.kt)("p",null,"Interface for accessing the storage from within the runtime."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"As of now, the storage API should silently ignore any keys that start with the ",(0,r.kt)("inlineCode",{parentName:"p"},":child_storage:default:")," prefix. This applies to reading and writing. If the function expects a return value, then ",(0,r.kt)("em",{parentName:"p"},"None")," (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") should be returned. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate/issues/12461"},"substrate issue ","#","12461"),".")),(0,r.kt)("h6",{id:"defn-state-version"},"Definition 198. State Version"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},"The state version, ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"v")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{v}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v")))))),", dictates how a Merkle root should be constructed. The data structure is a varying type of the following format:"),(0,r.kt)("div",{parentName:"admonition",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"v"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mtable",{parentName:"mrow",rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"0"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"full\xa0values")))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"1"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"node\xa0hashes"))))))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{v}={\\left\\lbrace\\begin{matrix}{0}&\\text{full values}\\\\{1}&\\text{node hashes}\\end{matrix}\\right.}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"2.4em",verticalAlign:"-0.95em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},(0,r.kt)("span",{parentName:"span",className:"delimsizing size3"},"{")),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mtable"},(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.45em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))),(0,r.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.95em"}},(0,r.kt)("span",{parentName:"span"}))))),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.45em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"full\xa0values")))),(0,r.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"node\xa0hashes"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.95em"}},(0,r.kt)("span",{parentName:"span"}))))))),(0,r.kt)("span",{parentName:"span",className:"mclose nulldelimiter"})))))))),(0,r.kt)("p",{parentName:"admonition"},"where ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mn",{parentName:"mrow"},"0")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{0}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0"))))))," indicates that the values of the keys should be inserted into the trie directly, and ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mn",{parentName:"mrow"},"1")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{1}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1")))))),' makes use of "node hashes" when calculating the Merkle proof (',(0,r.kt)("a",{parentName:"p",href:"chap-state#defn-hashed-subvalue"},"Definition 28"),").")),(0,r.kt)("h3",{id:"sect-storage-set"},"B.2.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_set")),(0,r.kt)("p",null,"Sets the value under a given key into storage."),(0,r.kt)("h4",{id:"id-version-1-prototype"},"B.2.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_set_version_1\n    (param $key i64) (param $value i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the value."))),(0,r.kt)("h3",{id:"id-ext_storage_get"},"B.2.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_get")),(0,r.kt)("p",null,"Retrieves the value associated with the given key from storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-2"},"B.2.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_get_version_1\n    (param $key i64) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") returning the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the value."))),(0,r.kt)("h3",{id:"id-ext_storage_read"},"B.2.3. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_read")),(0,r.kt)("p",null,"Gets the given key from storage, placing the value into a buffer and returning the number of bytes that the entry in storage has beyond the offset."),(0,r.kt)("h4",{id:"id-version-1-prototype-3"},"B.2.3.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_read_version_1\n    (param $key i64) (param $value_out i64) (param $offset i32) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value_out"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the buffer to which the value will be written to. This function will never write more then the length of the buffer, even if the value\u2019s length is bigger.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"offset"),": an u32 integer (typed as i32 due to wasm types) containing the offset beyond the value should be read from.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") pointing to a SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing an unsigned 32-bit integer representing the number of bytes left at supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"offset"),". Returns ",(0,r.kt)("em",{parentName:"p"},"None")," if the entry does not exist."))),(0,r.kt)("h3",{id:"id-ext_storage_clear"},"B.2.4. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_clear")),(0,r.kt)("p",null,"Clears the storage of the given key and its value. Non-existent entries are silently ignored."),(0,r.kt)("h4",{id:"id-version-1-prototype-4"},"B.2.4.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_clear_version_1\n    (param $key_data i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the key.")),(0,r.kt)("h3",{id:"id-ext_storage_exists"},"B.2.5. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_exists")),(0,r.kt)("p",null,"Checks whether the given key exists in storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-5"},"B.2.5.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_exists_version_1\n    (param $key_data i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": an i32 integer value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the key exists or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h3",{id:"id-ext_storage_clear_prefix"},"B.2.6. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_clear_prefix")),(0,r.kt)("p",null,"Clear the storage of each key/value pair where the key starts with the given prefix."),(0,r.kt)("h4",{id:"id-version-1-prototype-6"},"B.2.6.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_clear_prefix_version_1\n    (param $prefix i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prefix"),": a pointer-size (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the prefix.")),(0,r.kt)("h4",{id:"id-version-2-prototype"},"B.2.6.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_clear_prefix_version_2\n    (param $prefix i64) (param $limit i64)\n    (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"prefix"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the prefix.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"limit"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an ",(0,r.kt)("em",{parentName:"p"},"Option")," type (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing an unsigned 32-bit integer indicating the limit on how many keys should be deleted. No limit is applied if this is ",(0,r.kt)("em",{parentName:"p"},"None"),". Any keys created during the current block execution do not count toward the limit.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the following variant, ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"k")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{k}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k")))))),":"),(0,r.kt)("div",{parentName:"li",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"k"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mtable",{parentName:"mrow",rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"0"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mrow",{parentName:"mstyle"},(0,r.kt)("mo",{parentName:"mrow"},"\u2192"),(0,r.kt)("mi",{parentName:"mrow"},"c"))))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"1"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mrow",{parentName:"mstyle"},(0,r.kt)("mo",{parentName:"mrow"},"\u2192"),(0,r.kt)("mi",{parentName:"mrow"},"c")))))))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{k}={\\left\\lbrace\\begin{matrix}{0}&\\rightarrow{c}\\\\{1}&\\rightarrow{c}\\end{matrix}\\right.}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"2.4em",verticalAlign:"-0.95em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},(0,r.kt)("span",{parentName:"span",className:"delimsizing size3"},"{")),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mtable"},(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.45em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))),(0,r.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.95em"}},(0,r.kt)("span",{parentName:"span"}))))),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.45em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))),(0,r.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.95em"}},(0,r.kt)("span",{parentName:"span"}))))))),(0,r.kt)("span",{parentName:"span",className:"mclose nulldelimiter"})))))))),(0,r.kt)("p",{parentName:"li"},"where ",(0,r.kt)("em",{parentName:"p"},"0")," indicates that all keys of the child storage have been removed, followed by the number of removed keys, ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{c}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))))),". The variant ",(0,r.kt)("em",{parentName:"p"},"1")," indicates that there are remaining keys, followed by the number of removed keys."))),(0,r.kt)("h3",{id:"id-ext_storage_append"},"B.2.7. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_append")),(0,r.kt)("p",null,"Append the SCALE encoded value to a SCALE encoded sequence (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-scale-list"},"Definition 182"),") at the given key. This function assumes that the existing storage item is either empty or a SCALE-encoded sequence and that the value to append is also SCALE encoded and of the same type as the items in the existing sequence."),(0,r.kt)("p",null,"To improve performance, this function is allowed to skip decoding the entire SCALE encoded sequence and instead can just append the new item to the end of the existing data and increment the length prefix ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msubsup",{parentName:"mrow"},(0,r.kt)("mtext",{parentName:"msubsup"},"Enc"),(0,r.kt)("mtext",{parentName:"msubsup"},"SC"),(0,r.kt)("mtext",{parentName:"msubsup"},"Len"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{\\text{Enc}_{{\\text{SC}}}^{{\\text{Len}}}}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.1616em",verticalAlign:"-0.247em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"Enc")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.9146em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.453em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord text mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"SC")))))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.1362em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord text mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"Len"))))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.247em"}},(0,r.kt)("span",{parentName:"span"}))))))))))),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If the storage item does not exist or is not SCALE encoded, the storage item will be set to the specified value, represented as a SCALE-encoded byte array.")),(0,r.kt)("h4",{id:"id-version-1-prototype-7"},"B.2.7.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_append_version_1\n    (param $key i64) (param $value i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the value to be appended."))),(0,r.kt)("h3",{id:"id-ext_storage_root"},"B.2.8. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_root")),(0,r.kt)("p",null,"Compute the storage root."),(0,r.kt)("h4",{id:"sect-ext-storage-root-version-1"},"B.2.8.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_root_version_1\n    (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to a buffer containing the 256-bit Blake2 storage root.")),(0,r.kt)("h4",{id:"sect-ext-storage-root-version-2"},"B.2.8.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_root_version_2\n    (param $version i32) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"version"),": the state version (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-state-version"},"Definition 198"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the buffer containing the 256-bit Blake2 storage root."))),(0,r.kt)("h3",{id:"sect-ext-storage-changes-root"},"B.2.9. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_changes_root")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This function is not longer used and only exists for compatibility reasons.")),(0,r.kt)("h4",{id:"id-version-1-prototype-8"},"B.2.9.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_changes_root_version_1\n    (param $parent_hash i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"parent_hash"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded block hash.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an ",(0,r.kt)("em",{parentName:"p"},"Option")," type (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") that\u2019s always ",(0,r.kt)("em",{parentName:"p"},"None"),"."))),(0,r.kt)("h3",{id:"id-ext_storage_next_key"},"B.2.10. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_next_key")),(0,r.kt)("p",null,"Get the next key in storage after the given one in lexicographic order (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-lexicographic-ordering"},"Definition 197"),"). The key provided to this function may or may not exist in storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-9"},"B.2.10.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_next_key_version_1\n    (param $key i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the next key in lexicographic order."))),(0,r.kt)("h3",{id:"sect-ext-storage-start-transaction"},"B.2.11. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_start_transaction")),(0,r.kt)("p",null,"Start a new nested transaction. This allows to either commit or roll back all changes that are made after this call. For every transaction, there must be a matching call to either ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_storage_rollback_transaction")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-storage-rollback-transaction"},"Section B.2.12."),") or ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_storage_commit_transaction")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-storage-commit-transaction"},"Section B.2.13."),"). This is also effective for all values manipulated using the child storage API (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-child-storage-api"},"Section B.3."),"). It\u2019s legal to call this function multiple times in a row."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This is a low-level API that is potentially dangerous as it can easily result in unbalanced transactions. Runtimes should use high-level storage abstractions.")),(0,r.kt)("h4",{id:"id-version-1-prototype-10"},"B.2.11.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_start_transaction_version_1)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None.")),(0,r.kt)("h3",{id:"sect-ext-storage-rollback-transaction"},"B.2.12. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_rollback_transaction")),(0,r.kt)("p",null,"Rollback the last transaction started by ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_storage_start_transaction")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-storage-start-transaction"},"Section B.2.11."),"). Any changes made during that transaction are discarded. It\u2019s legal to call this function multiple times in a row."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Panics if ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_storage_start_transaction")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-storage-start-transaction"},"Section B.2.11."),") was not called.")),(0,r.kt)("h4",{id:"id-version-1-prototype-11"},"B.2.12.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_rollback_transaction_version_1)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None.")),(0,r.kt)("h3",{id:"sect-ext-storage-commit-transaction"},"B.2.13. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_storage_commit_transaction")),(0,r.kt)("p",null,"Commit the last transaction started by ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_storage_start_transaction")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-storage-start-transaction"},"Section B.2.11."),"). Any changes made during that transaction are committed to the main state. It\u2019s legal to call this function multiple times in a row."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Panics if ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_storage_start_transaction")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-storage-start-transaction"},"Section B.2.11."),") was not called.")),(0,r.kt)("h4",{id:"id-version-1-prototype-12"},"B.2.13.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_storage_commit_transaction_version_1)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None.")),(0,r.kt)("h2",{id:"sect-child-storage-api"},"B.3. Child Storage"),(0,r.kt)("p",null,"Interface for accessing the child storage from within the runtime."),(0,r.kt)("h6",{id:"defn-child-storage-type"},"Definition 199. Child Storage"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Child storage")," key is an unprefixed location of the child trie in the main trie.")),(0,r.kt)("h3",{id:"id-ext_default_child_storage_set"},"B.3.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_default_child_storage_set")),(0,r.kt)("p",null,"Sets the value under a given key into the child storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-13"},"B.3.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_set_version_1\n    (param $child_storage_key i64) (param $key i64) (param $value i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key")," : a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the value."))),(0,r.kt)("h3",{id:"id-ext_default_child_storage_get"},"B.3.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_default_child_storage_get")),(0,r.kt)("p",null,"Retrieves the value associated with the given key from the child storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-14"},"B.3.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_get_version_1\n    (param $child_storage_key i64) (param $key i64) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the value."))),(0,r.kt)("h3",{id:"id-ext_default_child_storage_read"},"B.3.3. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_default_child_storage_read")),(0,r.kt)("p",null,"Gets the given key from storage, placing the value into a buffer and returning the number of bytes that the entry in storage has beyond the offset."),(0,r.kt)("h4",{id:"id-version-1-prototype-15"},"B.3.3.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_read_version_1\n    (param $child_storage_key i64) (param $key i64) (param $value_out i64)\n    (param $offset i32) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value_out"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the buffer to which the value will be written to. This function will never write more then the length of the buffer, even if the value\u2019s length is bigger.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"offset"),": an u32 integer (typed as i32 due to wasm types) containing the offset beyond the value should be read from.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the number of bytes written into the ",(0,r.kt)("strong",{parentName:"p"},"value_out")," buffer. Returns if the entry does not exists."))),(0,r.kt)("h3",{id:"id-ext_default_child_storage_clear"},"B.3.4. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_default_child_storage_clear")),(0,r.kt)("p",null,"Clears the storage of the given key and its value from the child storage. Non-existent entries are silently ignored."),(0,r.kt)("h4",{id:"id-version-1-prototype-16"},"B.3.4.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_clear_version_1\n    (param $child_storage_key i64) (param $key i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key."))),(0,r.kt)("h3",{id:"id-ext_default_child_storage_storage_kill"},"B.3.5. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_default_child_storage_storage_kill")),(0,r.kt)("p",null,"Clears an entire child storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-17"},"B.3.5.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_storage_kill_version_1\n    (param $child_storage_key i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("h4",{id:"id-version-2-prototype-2"},"B.3.5.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_storage_kill_version_2\n    (param $child_storage_key i64) (param $limit i64)\n    (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"limit"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an ",(0,r.kt)("em",{parentName:"p"},"Option")," type (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing an unsigned 32-bit integer indicating the limit on how many keys should be deleted. No limit is applied if this is ",(0,r.kt)("em",{parentName:"p"},"None"),". Any keys created during the current block execution do not count toward the limit.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if all the keys of the child storage have been deleted or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if there are remaining keys."))),(0,r.kt)("h4",{id:"id-version-3-prototype"},"B.3.5.3. Version 3 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_storage_kill_version_3\n    (param $child_storage_key i64) (param $limit i64)\n    (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"limit"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an ",(0,r.kt)("em",{parentName:"p"},"Option")," type (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing an unsigned 32-bit integer indicating the limit on how many keys should be deleted. No limit is applied if this is ",(0,r.kt)("em",{parentName:"p"},"None"),". Any keys created during the current block execution do not count toward the limit.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the following variant, ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"k")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{k}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k")))))),":"),(0,r.kt)("div",{parentName:"li",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"k"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mtable",{parentName:"mrow",rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"0"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mrow",{parentName:"mstyle"},(0,r.kt)("mo",{parentName:"mrow"},"\u2192"),(0,r.kt)("mi",{parentName:"mrow"},"c"))))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"1"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mrow",{parentName:"mstyle"},(0,r.kt)("mo",{parentName:"mrow"},"\u2192"),(0,r.kt)("mi",{parentName:"mrow"},"c")))))))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{k}={\\left\\lbrace\\begin{matrix}{0}&\\rightarrow{c}\\\\{1}&\\rightarrow{c}\\end{matrix}\\right.}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"2.4em",verticalAlign:"-0.95em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},(0,r.kt)("span",{parentName:"span",className:"delimsizing size3"},"{")),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mtable"},(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.45em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))),(0,r.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.95em"}},(0,r.kt)("span",{parentName:"span"}))))),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.45em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))),(0,r.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.95em"}},(0,r.kt)("span",{parentName:"span"}))))))),(0,r.kt)("span",{parentName:"span",className:"mclose nulldelimiter"})))))))),(0,r.kt)("p",{parentName:"li"},"where ",(0,r.kt)("em",{parentName:"p"},"0")," indicates that all keys of the child storage have been removed, followed by the number of removed keys, ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{c}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))))),". The variant ",(0,r.kt)("em",{parentName:"p"},"1")," indicates that there are remaining keys, followed by the number of removed keys."))),(0,r.kt)("h3",{id:"id-ext_default_child_storage_exists"},"B.3.6. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_default_child_storage_exists")),(0,r.kt)("p",null,"Checks whether the given key exists in the child storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-18"},"B.3.6.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_exists_version_1\n    (param $child_storage_key i64) (param $key i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": an i32 integer value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the key exists or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h3",{id:"id-ext_default_child_storage_clear_prefix"},"B.3.7. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_default_child_storage_clear_prefix")),(0,r.kt)("p",null,"Clears the child storage of each key/value pair where the key starts with the given prefix."),(0,r.kt)("h4",{id:"id-version-1-prototype-19"},"B.3.7.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_clear_prefix_version_1\n    (param $child_storage_key i64) (param $prefix i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"prefix"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the prefix."))),(0,r.kt)("h4",{id:"id-version-2-prototype-3"},"B.3.7.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_clear_prefix_version_2\n    (param $child_storage_key i64) (param $prefix i64)\n    (param $limit i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"prefix"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the prefix.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"limit"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an ",(0,r.kt)("em",{parentName:"p"},"Option")," type (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing an unsigned 32-bit integer indicating the limit on how many keys should be deleted. No limit is applied if this is ",(0,r.kt)("em",{parentName:"p"},"None"),". Any keys created during the current block execution do not count towards the limit.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the following variant, ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"k")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{k}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k")))))),":"),(0,r.kt)("div",{parentName:"li",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"k"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mtable",{parentName:"mrow",rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"0"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mrow",{parentName:"mstyle"},(0,r.kt)("mo",{parentName:"mrow"},"\u2192"),(0,r.kt)("mi",{parentName:"mrow"},"c"))))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"1"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mrow",{parentName:"mstyle"},(0,r.kt)("mo",{parentName:"mrow"},"\u2192"),(0,r.kt)("mi",{parentName:"mrow"},"c")))))))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{k}={\\left\\lbrace\\begin{matrix}{0}&\\rightarrow{c}\\\\{1}&\\rightarrow{c}\\end{matrix}\\right.}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"2.4em",verticalAlign:"-0.95em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},(0,r.kt)("span",{parentName:"span",className:"delimsizing size3"},"{")),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mtable"},(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.45em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))),(0,r.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.95em"}},(0,r.kt)("span",{parentName:"span"}))))),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.45em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))),(0,r.kt)("span",{parentName:"span",style:{top:"-2.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.95em"}},(0,r.kt)("span",{parentName:"span"}))))))),(0,r.kt)("span",{parentName:"span",className:"mclose nulldelimiter"})))))))),(0,r.kt)("p",{parentName:"li"},"where ",(0,r.kt)("em",{parentName:"p"},"0")," indicates that all keys of the child storage have been removed, followed by the number of removed keys, ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{c}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))))),". The variant ",(0,r.kt)("em",{parentName:"p"},"1")," indicates that there are remaining keys, followed by the number of removed keys."))),(0,r.kt)("h3",{id:"id-ext_default_child_storage_root"},"B.3.8. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_default_child_storage_root")),(0,r.kt)("p",null,"Commits all existing operations and computes the resulting child storage root."),(0,r.kt)("h4",{id:"id-version-1-prototype-20"},"B.3.8.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_root_version_1\n    (param $child_storage_key i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded storage root."))),(0,r.kt)("h4",{id:"id-version-2-prototype-4"},"B.3.8.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_root_version_2\n    (param $child_storage_key i64) (param $version i32)\n    (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"version"),": the state version (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-state-version"},"Definition 198"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit Blake2 storage root."))),(0,r.kt)("h3",{id:"id-ext_default_child_storage_next_key"},"B.3.9. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_default_child_storage_next_key")),(0,r.kt)("p",null,"Gets the next key in storage after the given one in lexicographic order (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-lexicographic-ordering"},"Definition 197"),"). The key provided to this function may or may not exist in storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-21"},"B.3.9.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_default_child_storage_next_key_version_1\n    (param $child_storage_key i64) (param $key i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"child_storage_key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the child storage key (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-child-storage-type"},"Definition 199"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded as defined in ",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180")," containing the next key in lexicographic order. Returns if the entry cannot be found."))),(0,r.kt)("h2",{id:"sect-crypto-api"},"B.4. Crypto"),(0,r.kt)("p",null,"Interfaces for working with crypto related types from within the runtime."),(0,r.kt)("h6",{id:"defn-key-type-id"},"Definition 200. Key Type Identifier"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},"Cryptographic keys are stored in separate key stores based on their intended use case. The separate key stores are identified by a 4-byte ASCII ",(0,r.kt)("strong",{parentName:"p"},"key type identifier"),". The following known types are available:"),(0,r.kt)("h6",{parentName:"admonition",id:"tabl-key-type-ids"},"Table 5. Table of known key type identifiers"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Id"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"acco"),(0,r.kt)("td",{parentName:"tr",align:null},"Key type for the controlling accounts")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"babe"),(0,r.kt)("td",{parentName:"tr",align:null},"Key type for the Babe module")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gran"),(0,r.kt)("td",{parentName:"tr",align:null},"Key type for the Grandpa module")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"imon"),(0,r.kt)("td",{parentName:"tr",align:null},"Key type for the ImOnline module")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"audi"),(0,r.kt)("td",{parentName:"tr",align:null},"Key type for the AuthorityDiscovery module")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"para"),(0,r.kt)("td",{parentName:"tr",align:null},"Key type for the Parachain Validator Key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"asgn"),(0,r.kt)("td",{parentName:"tr",align:null},"Key type for the Parachain Assignment Key"))))),(0,r.kt)("h6",{id:"defn-ecdsa-verify-error"},"Definition 201. ECDSA Verify Error"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"EcdsaVerifyError")," is a varying data type (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-varrying-data-type"},"Definition 178"),") that specifies the error type when using ECDSA recovery functionality. The following values are possible:"),(0,r.kt)("h6",{parentName:"admonition",id:"tabl-ecdsa-verify-error"},"Table 6. Table of error types in ECDSA recovery"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Id"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Incorrect value of R or S")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Incorrect value of V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Invalid signature"))))),(0,r.kt)("h3",{id:"id-ext_crypto_ed25519_public_keys"},"B.4.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ed25519_public_keys")),(0,r.kt)("p",null,"Returns all ",(0,r.kt)("em",{parentName:"p"},"ed25519")," public keys for the given key identifier from the keystore."),(0,r.kt)("h4",{id:"id-version-1-prototype-22"},"B.4.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ed25519_public_keys_version_1\n    (param $key_type_id i32) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key type identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an SCALE encoded 256-bit public keys."))),(0,r.kt)("h3",{id:"id-ext_crypto_ed25519_generate"},"B.4.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ed25519_generate")),(0,r.kt)("p",null,"Generates an ",(0,r.kt)("em",{parentName:"p"},"ed25519")," key for the given key type using an optional BIP-39 seed and stores it in the keystore."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Panics if the key cannot be generated, such as when an invalid key type or invalid seed was provided.")),(0,r.kt)("h4",{id:"id-version-1-prototype-23"},"B.4.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ed25519_generate_version_1\n    (param $key_type_id i32) (param $seed i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key type identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"seed"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the BIP-39 seed which must be valid UTF8.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit public key."))),(0,r.kt)("h3",{id:"id-ext_crypto_ed25519_sign"},"B.4.3. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ed25519_sign")),(0,r.kt)("p",null,"Signs the given message with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ed25519")," key that corresponds to the given public key and key type in the keystore."),(0,r.kt)("h4",{id:"id-version-1-prototype-24"},"B.4.3.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ed25519_sign_version_1\n    (param $key_type_id i32) (param $key i32) (param $msg i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key type identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 256-bit public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be signed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the 64-byte signature. This function returns if the public key cannot be found in the key store."))),(0,r.kt)("h3",{id:"sect-ext-crypto-ed25519-verify"},"B.4.4. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ed25519_verify")),(0,r.kt)("p",null,"Verifies an ",(0,r.kt)("em",{parentName:"p"},"ed25519")," signature."),(0,r.kt)("h4",{id:"id-version-1-prototype-25"},"B.4.4.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ed25519_verify_version_1\n    (param $sig i32) (param $msg i64) (param $key i32) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 64-byte signature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be verified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 256-bit public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a i32 integer value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the signature is valid or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h3",{id:"sect-ext-crypto-ed25519-batch-verify"},"B.4.5. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ed25519_batch_verify")),(0,r.kt)("p",null,"Registers an ed25519 signature for batch verification. Batch verification is enabled by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_start_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-start-batch-verify"},"Section B.4.20."),"). The result of the verification is returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_finish_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-finish-batch-verify"},"Section B.4.21."),"). If batch verification is not enabled, the signature is verified immediately."),(0,r.kt)("h4",{id:"id-version-1"},"B.4.5.1. Version 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ed25519_batch_verify_version_1\n    (param $sig i32) (param $msg i64) (param $key i32) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 64-byte signature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be verified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 256-bit public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": an i32 integer value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the signature is valid or batched or a value equal ",(0,r.kt)("em",{parentName:"p"},"0")," to if otherwise."))),(0,r.kt)("h3",{id:"id-ext_crypto_sr25519_public_keys"},"B.4.6. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_sr25519_public_keys")),(0,r.kt)("p",null,"Returns all ",(0,r.kt)("em",{parentName:"p"},"sr25519")," public keys for the given key id from the keystore."),(0,r.kt)("h4",{id:"id-version-1-prototype-26"},"B.4.6.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_sr25519_public_keys_version_1\n    (param $key_type_id i32) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key type identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded 256-bit public keys."))),(0,r.kt)("h3",{id:"id-ext_crypto_sr25519_generate"},"B.4.7. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_sr25519_generate")),(0,r.kt)("p",null,"Generates an ",(0,r.kt)("em",{parentName:"p"},"sr25519")," key for the given key type using an optional BIP-39 seed and stores it in the keystore."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Panics if the key cannot be generated, such as when an invalid key type or invalid seed was provided.")),(0,r.kt)("h4",{id:"id-version-1-prototype-27"},"B.4.7.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_sr25519_generate_version_1\n    (param $key_type_id i32) (param $seed i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"seed"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the BIP-39 seed which must be valid UTF8.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit public key."))),(0,r.kt)("h3",{id:"id-ext_crypto_sr25519_sign"},"B.4.8. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_sr25519_sign")),(0,r.kt)("p",null,"Signs the given message with the ",(0,r.kt)("em",{parentName:"p"},"sr25519")," key that corresponds to the given public key and key type in the keystore."),(0,r.kt)("h4",{id:"id-version-1-prototype-28"},"B.4.8.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_sr25519_sign_version_1\n    (param $key_type_id i32) (param $key i32) (param $msg i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 256-bit public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be signed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the 64-byte signature. This function returns ",(0,r.kt)("em",{parentName:"p"},"None")," if the public key cannot be found in the key store."))),(0,r.kt)("h3",{id:"sect-ext-crypto-sr25519-verify"},"B.4.9. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_sr25519_verify")),(0,r.kt)("p",null,"Verifies an sr25519 signature."),(0,r.kt)("h4",{id:"id-version-1-prototype-29"},"B.4.9.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_sr25519_verify_version_1\n    (param $sig i32) (param $msg i64) (param $key i32) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 64-byte signature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be verified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 256-bit public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a i32 integer value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the signature is valid or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h4",{id:"id-version-2-prototype-5"},"B.4.9.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_sr25519_verify_version_2\n    (param $sig i32) (param $msg i64) (param $key i32) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 64-byte signature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be verified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 256-bit public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a i32 integer value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the signature is valid or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h3",{id:"sect-ext-crypto-sr25519-batch-verify"},"B.4.10. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_sr25519_batch_verify")),(0,r.kt)("p",null,"Registers a sr25519 signature for batch verification. Batch verification is enabled by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_start_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-start-batch-verify"},"Section B.4.20."),"). The result of the verification is returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_finish_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-finish-batch-verify"},"Section B.4.21."),"). If batch verification is not enabled, the signature is verified immediately."),(0,r.kt)("h4",{id:"id-version-1-2"},"B.4.10.1. Version 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_sr25519_batch_verify_version_1\n    (param $sig i32) (param $msg i64) (param $key i32) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 64-byte signature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be verified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 256-bit public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": an i32 integer value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the signature is valid or batched or a value equal ",(0,r.kt)("em",{parentName:"p"},"0")," to if otherwise."))),(0,r.kt)("h3",{id:"id-ext_crypto_ecdsa_public_keys"},"B.4.11. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ecdsa_public_keys")),(0,r.kt)("p",null,"Returns all ",(0,r.kt)("em",{parentName:"p"},"ecdsa")," public keys for the given key id from the keystore."),(0,r.kt)("h4",{id:"id-version-1-prototype-30"},"B.4.11.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ecdsa_public_key_version_1\n    (param $key_type_id i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key type identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded 33-byte compressed public keys."))),(0,r.kt)("h3",{id:"id-ext_crypto_ecdsa_generate"},"B.4.12. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ecdsa_generate")),(0,r.kt)("p",null,"Generates an ",(0,r.kt)("em",{parentName:"p"},"ecdsa")," key for the given key type using an optional BIP-39 seed and stores it in the keystore."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Panics if the key cannot be generated, such as when an invalid key type or invalid seed was provided.")),(0,r.kt)("h4",{id:"id-version-1-prototype-31"},"B.4.12.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ecdsa_generate_version_1\n    (param $key_type_id i32) (param $seed i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"seed"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the BIP-39 seed which must be valid UTF8.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 33-byte compressed public key."))),(0,r.kt)("h3",{id:"id-ext_crypto_ecdsa_sign"},"B.4.13. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ecdsa_sign")),(0,r.kt)("p",null,"Signs the hash of the given message with the ",(0,r.kt)("em",{parentName:"p"},"ecdsa")," key that corresponds to the given public key and key type in the keystore."),(0,r.kt)("h4",{id:"id-version-1-prototype-32"},"B.4.13.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ecdsa_sign_version_1\n    (param $key_type_id i32) (param $key i32) (param $msg i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 33-byte compressed public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be signed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the signature. The signature is 65-bytes in size, where the first 512-bits represent the signature and the other 8 bits represent the recovery ID. This function returns if the public key cannot be found in the key store."))),(0,r.kt)("h3",{id:"id-ext_crypto_ecdsa_sign_prehashed"},"B.4.14. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ecdsa_sign_prehashed")),(0,r.kt)("p",null,"Signs the prehashed message with the ",(0,r.kt)("em",{parentName:"p"},"ecdsa")," key that corresponds to the given public key and key type in the keystore."),(0,r.kt)("h4",{id:"id-version-1-prototype-33"},"B.4.14.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ecdsa_sign_prehashed_version_1\n    (param $key_type_id i32) (param $key i32) (param $msg i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key_type_id"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the key identifier (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-key-type-id"},"Definition 200"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 33-byte compressed public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be signed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the signature. The signature is 65-bytes in size, where the first 512-bits represent the signature and the other 8 bits represent the recovery ID. This function returns if the public key cannot be found in the key store."))),(0,r.kt)("h3",{id:"sect-ext-crypto-ecdsa-verify"},"B.4.15. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ecdsa_verify")),(0,r.kt)("p",null,"Verifies the hash of the given message against an ECDSA signature."),(0,r.kt)("h4",{id:"id-version-1-prototype-34"},"B.4.15.1. Version 1 - Prototype"),(0,r.kt)("p",null,"This function allows the verification of non-standard, overflowing ECDSA signatures, an implementation specific mechanism of the Rust ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/libsecp256k1"},(0,r.kt)("inlineCode",{parentName:"a"},"libsecp256k1")," library"),", specifically the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/libsecp256k1/0.7.0/libsecp256k1/struct.Signature#method.parse_overflowing"},(0,r.kt)("inlineCode",{parentName:"a"},"parse_overflowing"))," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ecdsa_verify_version_1\n    (param $sig i32) (param $msg i64) (param $key i32) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 65-byte signature. The signature is 65-bytes in size, where the first 512-bits represent the signature and the other 8 bits represent the recovery ID.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be verified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 33-byte compressed public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a i32 integer value equal ",(0,r.kt)("em",{parentName:"p"},"1")," to if the signature is valid or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h4",{id:"id-version-2-prototype-6"},"B.4.15.2. Version 2 - Prototype"),(0,r.kt)("p",null,"Does not allow the verification of non-standard, overflowing ECDSA signatures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ecdsa_verify_version_2\n    (param $sig i32) (param $msg i64) (param $key i32) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 65-byte signature. The signature is 65-bytes in size, where the first 512-bits represent the signature and the other 8 bits represent the recovery ID.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be verified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 33-byte compressed public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a i32 integer value equal ",(0,r.kt)("em",{parentName:"p"},"1")," to if the signature is valid or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h3",{id:"id-ext_crypto_ecdsa_verify_prehashed"},"B.4.16. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ecdsa_verify_prehashed")),(0,r.kt)("p",null,"Verifies the prehashed message against a ECDSA signature."),(0,r.kt)("h4",{id:"id-version-1-prototype-35"},"B.4.16.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ecdsa_verify_prehashed_version_1\n    (param $sig i32) (param $msg i32) (param $key i32) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 65-byte signature. The signature is 65-bytes in size, where the first 512-bits represent the signature and the other 8 bits represent the recovery ID.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer to the 32-bit prehashed message to be verified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the 33-byte compressed public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a i32 integer value equal ",(0,r.kt)("em",{parentName:"p"},"1")," to if the signature is valid or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h3",{id:"sect-ext-crypto-ecdsa-batch-verify"},"B.4.17. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_ecdsa_batch_verify")),(0,r.kt)("p",null,"Registers a ECDSA signature for batch verification. Batch verification is enabled by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_start_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-start-batch-verify"},"Section B.4.20."),"). The result of the verification is returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_finish_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-finish-batch-verify"},"Section B.4.21."),"). If batch verification is not enabled, the signature is verified immediately."),(0,r.kt)("h4",{id:"id-version-1-3"},"B.4.17.1. Version 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_ecdsa_batch_verify_version_1\n    (param $sig i32) (param $msg i64) (param $key i32) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 64-byte signature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the message that is to be verified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer to the buffer containing the 256-bit public key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a i32 integer value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the signature is valid or batched or a value equal ",(0,r.kt)("em",{parentName:"p"},"0")," to if otherwise."))),(0,r.kt)("h3",{id:"id-ext_crypto_secp256k1_ecdsa_recover"},"B.4.18. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_secp256k1_ecdsa_recover")),(0,r.kt)("p",null,"Verify and recover a ",(0,r.kt)("em",{parentName:"p"},"secp256k1")," ECDSA signature."),(0,r.kt)("h4",{id:"id-version-1-prototype-36"},"B.4.18.1. Version 1 - Prototype"),(0,r.kt)("p",null,"This function can handle non-standard, overflowing ECDSA signatures, an implemenation specific mechanism of the Rust ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/libsecp256k1"},(0,r.kt)("inlineCode",{parentName:"a"},"libsecp256k1")," library"),", specifically the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/libsecp256k1/0.7.0/libsecp256k1/struct.Signature#method.parse_overflowing"},(0,r.kt)("inlineCode",{parentName:"a"},"parse_overflowing"))," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_secp256k1_ecdsa_recover_version_1\n    (param $sig i32) (param $msg i32) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 65-byte signature in RSV format. V should be either ",(0,r.kt)("inlineCode",{parentName:"p"},"0/1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"27/28"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit Blake2 hash of the message.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Result")," (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),"). On success it contains the 64-byte recovered public key or an error type (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-ecdsa-verify-error"},"Definition 201"),") on failure."))),(0,r.kt)("h4",{id:"id-version-2-prototype-7"},"B.4.18.2. Version 2 - Prototype"),(0,r.kt)("p",null,"Does not handle non-standard, overflowing ECDSA signatures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_secp256k1_ecdsa_recover_version_2\n    (param $sig i32) (param $msg i32) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 65-byte signature in RSV format. V should be either or .")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit Blake2 hash of the message.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Result")," (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),"). On success it contains the 64-byte recovered public key or an error type (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-ecdsa-verify-error"},"Definition 201"),") on failure."))),(0,r.kt)("h3",{id:"id-ext_crypto_secp256k1_ecdsa_recover_compressed"},"B.4.19. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_secp256k1_ecdsa_recover_compressed")),(0,r.kt)("p",null,"Verify and recover a ",(0,r.kt)("em",{parentName:"p"},"secp256k1")," ECDSA signature."),(0,r.kt)("h4",{id:"id-version-1-prototype-37"},"B.4.19.1. Version 1 - Prototype"),(0,r.kt)("p",null,"This function can handle non-standard, overflowing ECDSA signatures, an implemenation specific mechanism of the Rust ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/libsecp256k1"},(0,r.kt)("inlineCode",{parentName:"a"},"libsecp256k1")," library"),", specifically the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/libsecp256k1/0.7.0/libsecp256k1/struct.Signature#method.parse_overflowing"},(0,r.kt)("inlineCode",{parentName:"a"},"parse_overflowing"))," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_secp256k1_ecdsa_recover_compressed_version_1\n    (param $sig i32) (param $msg i32) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 65-byte signature in RSV format. V should be either ",(0,r.kt)("inlineCode",{parentName:"p"},"0/1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"27/28"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit Blake2 hash of the message.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),"). On success it contains the 33-byte recovered public key in compressed form on success or an error type (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-ecdsa-verify-error"},"Definition 201"),") on failure."))),(0,r.kt)("h4",{id:"id-version-2-prototype-8"},"B.4.19.2. Version 2 - Prototype"),(0,r.kt)("p",null,"Does not handle non-standard, overflowing ECDSA signatures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_secp256k1_ecdsa_recover_compressed_version_2\n    (param $sig i32) (param $msg i32) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sig"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 65-byte signature in RSV format. V should be either ",(0,r.kt)("inlineCode",{parentName:"p"},"0/1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"27/28"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"msg"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit Blake2 hash of the message.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),"). On success it contains the 33-byte recovered public key in compressed form on success or an error type (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-ecdsa-verify-error"},"Definition 201"),") on failure."))),(0,r.kt)("h3",{id:"sect-ext-crypto-start-batch-verify"},"B.4.20. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_start_batch_verify")),(0,r.kt)("p",null,"Starts the verification extension. The extension is a separate background process and is used to parallel-verify signatures which are pushed to the batch with ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_ed25519_batch_verify"),"(",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-ed25519-batch-verify"},"Section B.4.5."),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_sr25519_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-sr25519-batch-verify"},"Section B.4.10."),") or ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_ecdsa_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-ecdsa-batch-verify"},"Section B.4.17."),"). Verification will start immediately and the Runtime can retrieve the result when calling ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_finish_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-finish-batch-verify"},"Section B.4.21."),")."),(0,r.kt)("h4",{id:"id-version-1-prototype-38"},"B.4.20.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_start_batch_verify_version_1)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None.")),(0,r.kt)("h3",{id:"sect-ext-crypto-finish-batch-verify"},"B.4.21. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_crypto_finish_batch_verify")),(0,r.kt)("p",null,"Finish verifying the batch of signatures since the last call to this function. Blocks until all the signatures are verified."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Panics if ",(0,r.kt)("inlineCode",{parentName:"p"},"ext_crypto_start_batch_verify")," (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#sect-ext-crypto-start-batch-verify"},"Section B.4.20."),") was not called.")),(0,r.kt)("h4",{id:"id-version-1-prototype-39"},"B.4.21.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_crypto_finish_batch_verify_version_1\n    (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"return"),": an i32 integer value equal to ",(0,r.kt)("em",{parentName:"li"},"1")," if all the signatures are valid or a value equal to ",(0,r.kt)("em",{parentName:"li"},"0")," if one or more of the signatures are invalid.")),(0,r.kt)("h2",{id:"sect-hashing-api"},"B.5. Hashing"),(0,r.kt)("p",null,"Interface that provides functions for hashing with different algorithms."),(0,r.kt)("h3",{id:"id-ext_hashing_keccak_256"},"B.5.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_hashing_keccak_256")),(0,r.kt)("p",null,"Conducts a 256-bit Keccak hash."),(0,r.kt)("h4",{id:"id-version-1-prototype-40"},"B.5.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_hashing_keccak_256_version_1\n    (param $data i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the data to be hashed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit hash result."))),(0,r.kt)("h3",{id:"id-ext_hashing_keccak_512"},"B.5.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_hashing_keccak_512")),(0,r.kt)("p",null,"Conducts a 512-bit Keccak hash."),(0,r.kt)("h4",{id:"id-version-1-prototype-41"},"B.5.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_hashing_keccak_512_version_1\n    (param $data i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the data to be hashed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 512-bit hash result."))),(0,r.kt)("h3",{id:"id-ext_hashing_sha2_256"},"B.5.3. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_hashing_sha2_256")),(0,r.kt)("p",null,"Conducts a 256-bit Sha2 hash."),(0,r.kt)("h4",{id:"id-version-1-prototype-42"},"B.5.3.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_hashing_sha2_256_version_1\n    (param $data i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the data to be hashed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit hash result."))),(0,r.kt)("h3",{id:"id-ext_hashing_blake2_128"},"B.5.4. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_hashing_blake2_128")),(0,r.kt)("p",null,"Conducts a 128-bit Blake2 hash."),(0,r.kt)("h4",{id:"id-version-1-prototype-43"},"B.5.4.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_hashing_blake2_128_version_1\n    (param $data i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the data to be hashed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 128-bit hash result."))),(0,r.kt)("h3",{id:"id-ext_hashing_blake2_256"},"B.5.5. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_hashing_blake2_256")),(0,r.kt)("p",null,"Conducts a 256-bit Blake2 hash."),(0,r.kt)("h4",{id:"id-version-1-prototype-44"},"B.5.5.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_hashing_blake2_256_version_1\n    (param $data i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the data to be hashed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit hash result."))),(0,r.kt)("h3",{id:"id-ext_hashing_twox_64"},"B.5.6. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_hashing_twox_64")),(0,r.kt)("p",null,"Conducts a 64-bit xxHash hash."),(0,r.kt)("h4",{id:"id-version-1-prototype-45"},"B.5.6.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_hashing_twox_64_version_1\n    (param $data i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the data to be hashed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 64-bit hash result."))),(0,r.kt)("h3",{id:"id-ext_hashing_twox_128"},"B.5.7. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_hashing_twox_128")),(0,r.kt)("p",null,"Conducts a 128-bit xxHash hash."),(0,r.kt)("h4",{id:"id-version-1-prototype-46"},"B.5.7.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_hashing_twox_128\n    (param $data i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the data to be hashed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 128-bit hash result."))),(0,r.kt)("h3",{id:"id-ext_hashing_twox_256"},"B.5.8. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_hashing_twox_256")),(0,r.kt)("p",null,"Conducts a 256-bit xxHash hash."),(0,r.kt)("h4",{id:"id-version-1-prototype-47"},"B.5.8.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_hashing_twox_256\n    (param $data i64) (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the data to be hashed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit hash result."))),(0,r.kt)("h2",{id:"sect-offchain-api"},"B.6. Offchain"),(0,r.kt)("p",null,"The Offchain Workers allow the execution of long-running and possibly non-deterministic tasks (e.g. web requests, encryption/decryption and signing of data, random number generation, CPU-intensive computations, enumeration/aggregation of on-chain data, etc.) which could otherwise require longer than the block execution time. Offchain Workers have their own execution environment. This separation of concerns is to make sure that the block production is not impacted by the long-running tasks."),(0,r.kt)("p",null,"All data and results generated by Offchain workers are unique per node and nondeterministic. Information can be propagated to other nodes by submitting a transaction that should be included in the next block. As Offchain workers runs on their own execution environment they have access to their own separate storage. There are two different types of storage available which are defined in ",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-persistent-storage"},"Definition 202")," and ",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-local-storage"},"Definition 203"),"."),(0,r.kt)("h6",{id:"defn-offchain-persistent-storage"},"Definition 202. Persisted Storage"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Persistent storage")," is non-revertible and not fork-aware. It means that any value set by the offchain worker is persisted even if that block (at which the worker is called) is reverted as non-canonical (meaning that the block was surpassed by a longer chain). The value is available for the worker that is re-run at the new (different block with the same block number) and future blocks. This storage can be used by offchain workers to handle forks and coordinate offchain workers running on different forks.")),(0,r.kt)("h6",{id:"defn-offchain-local-storage"},"Definition 203. Local Storage"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Local storage")," is revertible and fork-aware. It means that any value set by the offchain worker triggered at a certain block is reverted if that block is reverted as non-canonical. The value is NOT available for the worker that is re-run at the next or any future blocks.")),(0,r.kt)("h6",{id:"defn-http-status-code"},"Definition 204. HTTP Status Code"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"HTTP status codes")," that can get returned by certain Offchain HTTP functions."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"0"),": the specified request identifier is invalid.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"10"),": the deadline for the started request was reached.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"20"),": an error has occurred during the request, e.g. a timeout or the remote server has closed the connection. On returning this error code, the request is considered destroyed and must be reconstructed again.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"100"),"-",(0,r.kt)("inlineCode",{parentName:"p"},"999"),": the request has finished with the given HTTP status code.")))),(0,r.kt)("h6",{id:"defn-http-error"},"Definition 205. HTTP Error"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},"HTTP error, ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"E")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{E}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"E")))))),", is a varying data type (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-varrying-data-type"},"Definition 178"),") and specifies the error types of certain HTTP functions. Following values are possible:"),(0,r.kt)("div",{parentName:"admonition",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"E"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mtable",{parentName:"mrow",rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"0"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"The\xa0deadile\xa0was\xa0reached")))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"1"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"There\xa0was\xa0an\xa0IO\xa0error\xa0while\xa0processing\xa0the\xa0request")))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"2"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"The\xa0Id\xa0of\xa0the\xa0request\xa0is\xa0invalid"))))))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{E}={\\left\\lbrace\\begin{matrix}{0}&\\text{The deadile was reached}\\\\{1}&\\text{There was an IO error while processing the request}\\\\{2}&\\text{The Id of the request is invalid}\\end{matrix}\\right.}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"E")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"3.6em",verticalAlign:"-1.55em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen"},(0,r.kt)("span",{parentName:"span",className:"delimsizing mult"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.05em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.5em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.15em"}}),(0,r.kt)("span",{parentName:"span",className:"delimsizinginner delim-size4"},(0,r.kt)("span",{parentName:"span"},"\u23a9"))),(0,r.kt)("span",{parentName:"span",style:{top:"-2.492em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.15em"}}),(0,r.kt)("span",{parentName:"span",style:{height:"0.016em",width:"0.8889em"}},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.016em",style:{width:"0.8889em"},viewBox:"0 0 888.89 16",preserveAspectRatio:"xMinYMin"},(0,r.kt)("path",{parentName:"svg",d:"M384 0 H504 V16 H384z M384 0 H504 V16 H384z"})))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.15em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.15em"}}),(0,r.kt)("span",{parentName:"span",className:"delimsizinginner delim-size4"},(0,r.kt)("span",{parentName:"span"},"\u23a8"))),(0,r.kt)("span",{parentName:"span",style:{top:"-4.292em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.15em"}}),(0,r.kt)("span",{parentName:"span",style:{height:"0.016em",width:"0.8889em"}},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.016em",style:{width:"0.8889em"},viewBox:"0 0 888.89 16",preserveAspectRatio:"xMinYMin"},(0,r.kt)("path",{parentName:"svg",d:"M384 0 H504 V16 H384z M384 0 H504 V16 H384z"})))),(0,r.kt)("span",{parentName:"span",style:{top:"-4.3em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.15em"}}),(0,r.kt)("span",{parentName:"span",className:"delimsizinginner delim-size4"},(0,r.kt)("span",{parentName:"span"},"\u23a7")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.55em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mtable"},(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.05em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-4.21em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.01em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1")))),(0,r.kt)("span",{parentName:"span",style:{top:"-1.81em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"2"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.55em"}},(0,r.kt)("span",{parentName:"span"}))))),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.05em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-4.21em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"The\xa0deadile\xa0was\xa0reached")))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.01em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"There\xa0was\xa0an\xa0IO\xa0error\xa0while\xa0processing\xa0the\xa0request")))),(0,r.kt)("span",{parentName:"span",style:{top:"-1.81em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"The\xa0Id\xa0of\xa0the\xa0request\xa0is\xa0invalid"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.55em"}},(0,r.kt)("span",{parentName:"span"}))))))),(0,r.kt)("span",{parentName:"span",className:"mclose nulldelimiter"}))))))))),(0,r.kt)("h3",{id:"id-ext_offchain_is_validator"},"B.6.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_is_validator")),(0,r.kt)("p",null,"Check whether the local node is a potential validator. Even if this function returns ",(0,r.kt)("em",{parentName:"p"},"1"),", it does not mean that any keys are configured or that the validator is registered in the chain."),(0,r.kt)("h4",{id:"id-version-1-prototype-48"},"B.6.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_is_validator_version_1 (return i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"return"),": a i32 integer which is equal to ",(0,r.kt)("em",{parentName:"li"},"1")," if the local node is a potential validator or a integer equal to ",(0,r.kt)("em",{parentName:"li"},"0")," if it is not.")),(0,r.kt)("h3",{id:"sect-ext-offchain-submit-transaction"},"B.6.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_submit_transaction")),(0,r.kt)("p",null,"Given a SCALE encoded extrinsic, this function submits the extrinsic to the Host\u2019s transaction pool, ready to be propagated to remote peers."),(0,r.kt)("h4",{id:"id-version-1-prototype-49"},"B.6.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_submit_transaction_version_1\n    (param $data i64) (return i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the byte array storing the encoded extrinsic.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Result")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),"). Neither on success or failure is there any additional data provided. The cause of a failure is implementation specific."))),(0,r.kt)("h3",{id:"id-ext_offchain_network_state"},"B.6.3. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_network_state")),(0,r.kt)("p",null,"Returns the SCALE encoded, opaque information about the local node\u2019s network state."),(0,r.kt)("h6",{id:"defn-opaque-network-state"},"Definition 206. Opaque Network State"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},"Opaque network state structure"),", ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"S")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{S}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S")))))),", is a SCALE encoded blob holding information about the the ",(0,r.kt)("em",{parentName:"p"},"libp2p PeerId"),", ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"P"),(0,r.kt)("mtext",{parentName:"msub"},"id"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{P}_{{\\text{id}}}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord text mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"id"))))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))))))),", of the local node and a list of ",(0,r.kt)("em",{parentName:"p"},"libp2p Multiaddresses"),", ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"("),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"M"),(0,r.kt)("mn",{parentName:"msub"},"0")),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mo",{parentName:"mrow"},"\u2026"),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"M"),(0,r.kt)("mi",{parentName:"msub"},"n")),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{\\left({M}_{{0}},\\ldots{M}_{{n}}\\right)}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0")))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},"\u2026"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},")"))))))),", the node knows it can be reached at:"),(0,r.kt)("div",{parentName:"admonition",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"S"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"("),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"P"),(0,r.kt)("mtext",{parentName:"msub"},"id")),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"("),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"M"),(0,r.kt)("mn",{parentName:"msub"},"0")),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mo",{parentName:"mrow"},"\u2026"),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"M"),(0,r.kt)("mi",{parentName:"msub"},"n")),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},")")),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},")"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{S}={\\left({P}_{{\\text{id}}},{\\left({M}_{{0}},\\ldots{M}_{{n}}\\right)}\\right)}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord text mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"id"))))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0")))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},"\u2026"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},")"))),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},")")))))))),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"where")),(0,r.kt)("div",{parentName:"admonition",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"P"),(0,r.kt)("mtext",{parentName:"msub"},"id")),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"("),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"b"),(0,r.kt)("mn",{parentName:"msub"},"0")),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mo",{parentName:"mrow"},"\u2026"),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"b"),(0,r.kt)("mi",{parentName:"msub"},"n")),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},")"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{P}_{{\\text{id}}}={\\left({b}_{{0}},\\ldots{b}_{{n}}\\right)}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord text mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"id"))))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"b")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0")))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},"\u2026"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"b")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},")")))))))),(0,r.kt)("div",{parentName:"admonition",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"M"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"("),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"b"),(0,r.kt)("mn",{parentName:"msub"},"0")),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mo",{parentName:"mrow"},"\u2026"),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"b"),(0,r.kt)("mi",{parentName:"msub"},"n")),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},")"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{M}={\\left({b}_{{0}},\\ldots{b}_{{n}}\\right)}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"b")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0")))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},"\u2026"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"b")),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},")")))))))),(0,r.kt)("p",{parentName:"admonition"},"The information contained in this structure is naturally opaque to the caller of this function.")),(0,r.kt)("h4",{id:"id-version-1-prototype-50"},"B.6.3.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_network_state_version_1 (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("inlineCode",{parentName:"li"},"Result")," value (",(0,r.kt)("a",{parentName:"li",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),"). On success it contains the ",(0,r.kt)("em",{parentName:"li"},"Opaque network state")," structure (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-opaque-network-state"},"Definition 206"),"). On failure, an empty value is yielded where its cause is implementation specific.")),(0,r.kt)("h3",{id:"id-ext_offchain_timestamp"},"B.6.4. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_timestamp")),(0,r.kt)("p",null,"Returns the current timestamp."),(0,r.kt)("h4",{id:"id-version-1-prototype-51"},"B.6.4.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_timestamp_version_1 (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),": an u64 integer (typed as i64 due to wasm types) indicating the current UNIX timestamp (",(0,r.kt)("a",{parentName:"li",href:"id-cryptography-encoding#defn-unix-time"},"Definition 171"),").")),(0,r.kt)("h3",{id:"id-ext_offchain_sleep_until"},"B.6.5. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_sleep_until")),(0,r.kt)("p",null,"Pause the execution until the ",(0,r.kt)("inlineCode",{parentName:"p"},"deadline")," is reached."),(0,r.kt)("h4",{id:"id-version-1-prototype-52"},"B.6.5.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_sleep_until_version_1 (param $deadline i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deadline"),": an u64 integer (typed as i64 due to wasm types) specifying the UNIX timestamp (",(0,r.kt)("a",{parentName:"li",href:"id-cryptography-encoding#defn-unix-time"},"Definition 171"),").")),(0,r.kt)("h3",{id:"id-ext_offchain_random_seed"},"B.6.6. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_random_seed")),(0,r.kt)("p",null,"Generates a random seed. This is a truly random non deterministic seed generated by the host environment."),(0,r.kt)("h4",{id:"id-version-1-prototype-53"},"B.6.6.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_random_seed_version_1 (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit seed.")),(0,r.kt)("h3",{id:"id-ext_offchain_local_storage_set"},"B.6.7. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_local_storage_set")),(0,r.kt)("p",null,"Sets a value in the local storage. This storage is not part of the consensus, it\u2019s only accessible by the offchain worker tasks running on the same machine and is persisted between runs."),(0,r.kt)("h4",{id:"id-version-1-prototype-54"},"B.6.7.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_local_storage_set_version_1\n    (param $kind i32) (param $key i64) (param $value i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"kind"),": an i32 integer indicating the storage kind. A value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," is used for a persistent storage (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-persistent-storage"},"Definition 202"),") and a value equal to ",(0,r.kt)("em",{parentName:"p"},"2")," for local storage (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-local-storage"},"Definition 203"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the value."))),(0,r.kt)("h3",{id:"id-ext_offchain_local_storage_clear"},"B.6.8. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_local_storage_clear")),(0,r.kt)("p",null,"Remove a value from the local storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-55"},"B.6.8.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_local_storage_clear_version_1\n    (param $kind i32) (param $key i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"kind"),": an i32 integer indicating the storage kind. A value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," is used for a persistent storage (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-persistent-storage"},"Definition 202"),") and a value equal to ",(0,r.kt)("em",{parentName:"p"},"2")," for local storage (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-local-storage"},"Definition 203"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key."))),(0,r.kt)("h3",{id:"id-ext_offchain_local_storage_compare_and_set"},"B.6.9. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_local_storage_compare_and_set")),(0,r.kt)("p",null,"Sets a new value in the local storage if the condition matches the current value."),(0,r.kt)("h4",{id:"id-version-1-prototype-56"},"B.6.9.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(fund $ext_offchain_local_storage_compare_and_set_version_1\n    (param $kind i32) (param $key i64) (param $old_value i64)\n    (param $new_value i64) (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"kind"),": an i32 integer indicating the storage kind. A value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," is used for a persistent storage (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-persistent-storage"},"Definition 202"),") and a value equal to ",(0,r.kt)("em",{parentName:"p"},"2")," for local storage (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-local-storage"},"Definition 203"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"old_value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the old key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"new_value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the new value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": an i32 integer equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the new value has been set or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h3",{id:"id-ext_offchain_local_storage_get"},"B.6.10. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_local_storage_get")),(0,r.kt)("p",null,"Gets a value from the local storage."),(0,r.kt)("h4",{id:"id-version-1-prototype-57"},"B.6.10.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_local_storage_get_version_1\n    (param $kind i32) (param $key i64) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"kind"),": an i32 integer indicating the storage kind. A value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," is used for a persistent storage (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-persistent-storage"},"Definition 202"),") and a value equal to ",(0,r.kt)("em",{parentName:"p"},"2")," for local storage (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-offchain-local-storage"},"Definition 203"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the value or the corresponding key."))),(0,r.kt)("h3",{id:"id-ext_offchain_http_request_start"},"B.6.11. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_http_request_start")),(0,r.kt)("p",null,"Initiates a HTTP request given by the HTTP method and the URL. Returns the Id of a newly started request."),(0,r.kt)("h4",{id:"id-version-1-prototype-58"},"B.6.11.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_http_request_start_version_1\n  (param $method i64) (param $uri i64) (param $meta i64) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"method"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the HTTP method. Possible values are \u201cGET\u201d and \u201cPOST\u201d.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"uri"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the URI.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"meta"),": a future-reserved field containing additional, SCALE encoded parameters. Currently, an empty array should be passed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Result")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),") containing the i16 ID of the newly started request. On failure no additionally data is provided. The cause of failure is implementation specific."))),(0,r.kt)("h3",{id:"id-ext_offchain_http_request_add_header"},"B.6.12. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_http_request_add_header")),(0,r.kt)("p",null,"Append header to the request. Returns an error if the request identifier is invalid, ",(0,r.kt)("inlineCode",{parentName:"p"},"http_response_wait")," has already been called on the specified request identifier, the deadline is reached or an I/O error has happened (e.g. the remote has closed the connection)."),(0,r.kt)("h4",{id:"id-version-1-prototype-59"},"B.6.12.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_http_request_add_header_version_1\n    (param $request_id i32) (param $name i64) (param $value i64) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"request_id"),": an i32 integer indicating the ID of the started request.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"name"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the HTTP header name.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the HTTP header value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Result")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),"). Neither on success or failure is there any additional data provided. The cause of failure is implementation specific."))),(0,r.kt)("h3",{id:"id-ext_offchain_http_request_write_body"},"B.6.13. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_http_request_write_body")),(0,r.kt)("p",null,"Writes a chunk of the request body. Returns a non-zero value in case the deadline is reached or the chunk could not be written."),(0,r.kt)("h4",{id:"id-version-1-prototype-60"},"B.6.13.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_http_request_write_body_version_1\n    (param $request_id i32) (param $chunk i64) (param $deadline i64) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"request_id"),": an i32 integer indicating the ID of the started request.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"chunk"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the chunk of bytes. Writing an empty chunk finalizes the request.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"deadline"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the UNIX timestamp (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-unix-time"},"Definition 171"),"). Passing ",(0,r.kt)("em",{parentName:"p"},"None")," blocks indefinitely.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Result")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),"). On success, no additional data is provided. On error it contains the HTTP error type (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-http-error"},"Definition 205"),")."))),(0,r.kt)("h3",{id:"id-ext_offchain_http_response_wait"},"B.6.14. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_http_response_wait")),(0,r.kt)("p",null,"Returns an array of request statuses (the length is the same as IDs). Note that if deadline is not provided the method will block indefinitely, otherwise unready responses will produce DeadlineReached status."),(0,r.kt)("h4",{id:"id-version-1-prototype-61"},"B.6.14.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_http_response_wait_version_1\n    (param $ids i64) (param $deadline i64) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ids"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded array of started request IDs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"deadline"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the UNIX timestamp (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-unix-time"},"Definition 171"),"). Passing None blocks indefinitely.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded array of request statuses (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-http-status-code"},"Definition 204"),")."))),(0,r.kt)("h3",{id:"id-ext_offchain_http_response_headers"},"B.6.15. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_http_response_headers")),(0,r.kt)("p",null,"Read all HTTP response headers. Returns an array of key/value pairs. Response headers must be read before the response body."),(0,r.kt)("h4",{id:"id-version-1-prototype-62"},"B.6.15.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_http_response_headers_version_1\n    (param $request_id i32) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"request_id"),": an i32 integer indicating the ID of the started request.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to a SCALE encoded array of key/value pairs."))),(0,r.kt)("h3",{id:"id-ext_offchain_http_response_read_body"},"B.6.16. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_offchain_http_response_read_body")),(0,r.kt)("p",null,"Reads a chunk of body response to the given buffer. Returns the number of bytes written or an error in case a deadline is reached or the server closed the connection. If 0 is returned it means that the response has been fully consumed and the request_id is now invalid. This implies that response headers must be read before draining the body."),(0,r.kt)("h4",{id:"id-version-1-prototype-63"},"B.6.16.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_http_response_read_body_version_1\n    (param $request_id i32) (param $buffer i64) (param $deadline i64) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"request_id"),": an i32 integer indicating the ID of the started request.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"buffer"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the buffer where the body gets written to.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"deadline"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the UNIX timestamp (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-unix-time"},"Definition 171"),"). Passing ",(0,r.kt)("em",{parentName:"p"},"None")," will block indefinitely.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Result")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-result-type"},"Definition 181"),"). On success it contains an i32 integer specifying the number of bytes written or a HTTP error type (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-http-error"},"Definition 205"),") on failure."))),(0,r.kt)("h2",{id:"sect-offchainindex-api"},"B.7. Offchain Index"),(0,r.kt)("p",null,"Interface that provides functions to access the Offchain DB through offchain indexing. "),(0,r.kt)("h3",{id:"id-offchain_index_set"},"B.7.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"Offchain_index_set")),(0,r.kt)("p",null,"Write a key-value pair to the Offchain DB in a buffered fashion. "),(0,r.kt)("h4",{id:"id-version-1-prototype-Offchain_index_set"},"B.7.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_index_set_version_1\n    (param $key i64) (param $value i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the value."))),(0,r.kt)("h3",{id:"id-offchain_index_clear"},"B.7.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"Offchain_index_clear")),(0,r.kt)("p",null,"Remove a key and its associated value from the Offchain DB."),(0,r.kt)("h4",{id:"id-version-1-prototype-Offchain_index_clear"},"B.7.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_offchain_index_set_version_1\n    (param $key i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") containing the key.")),(0,r.kt)("h2",{id:"sect-trie-api"},"B.8. Trie"),(0,r.kt)("p",null,"Interface that provides trie related functionality."),(0,r.kt)("h3",{id:"id-ext_trie_blake2_256_root"},"B.8.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_trie_blake2_256_root")),(0,r.kt)("p",null,"Compute a 256-bit Blake2 trie root formed from the iterated items."),(0,r.kt)("h4",{id:"id-version-1-prototype-64"},"B.8.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_blake2_256_root_version_1\n    (param $data i64) (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the iterated items from which the trie root gets formed. The items consist of a SCALE encoded array containing arbitrary key/value pairs (tuples).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit trie root."))),(0,r.kt)("h4",{id:"id-version-2-prototype-9"},"B.8.1.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_blake2_256_root_version_2\n    (param $data i64) (param $version i32)\n    (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the iterated items from which the trie root gets formed. The items consist of a SCALE encoded array containing arbitrary key/value pairs (tuples).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"version"),": the state version (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-state-version"},"Definition 198"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit trie root."))),(0,r.kt)("h3",{id:"id-ext_trie_blake2_256_ordered_root"},"B.8.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_trie_blake2_256_ordered_root")),(0,r.kt)("p",null,"Compute a 256-bit Blake2 trie root formed from the enumerated items."),(0,r.kt)("h4",{id:"id-version-1-prototype-65"},"B.8.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_blake2_256_ordered_root_version_1\n    (param $data i64) (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the enumerated items from which the trie root gets formed. The items consist of a SCALE encoded array containing only values, where the corresponding key of each value is the index of the item in the array, starting at 0. The keys are compact encoded integers (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-sc-len-encoding"},"Definition 188"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit trie root result."))),(0,r.kt)("h4",{id:"id-version-2-prototype-10"},"B.8.2.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_blake2_256_ordered_root_version_2\n    (param $data i64) (param $version i32)\n    (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the enumerated items from which the trie root gets formed. The items consist of a SCALE encoded array containing only values, where the corresponding key of each value is the index of the item in the array, starting at 0. The keys are compact encoded integers (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-sc-len-encoding"},"Definition 188"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"version"),": the state version (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-state-version"},"Definition 198"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit trie root result."))),(0,r.kt)("h3",{id:"id-ext_trie_keccak_256_root"},"B.8.3. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_trie_keccak_256_root")),(0,r.kt)("p",null,"Compute a 256-bit Keccak trie root formed from the iterated items."),(0,r.kt)("h4",{id:"id-version-1-prototype-66"},"B.8.3.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_keccak_256_root_version_1\n    (param $data i64) (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the iterated items from which the trie root gets formed. The items consist of a SCALE encoded array containing arbitrary key/value pairs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit trie root."))),(0,r.kt)("h4",{id:"id-version-2-prototype-11"},"B.8.3.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_keccak_256_root_version_2\n    (param $data i64) (param $version i32)\n    (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the iterated items from which the trie root gets formed. The items consist of a SCALE encoded array containing arbitrary key/value pairs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"version"),": the state version (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-state-version"},"Definition 198"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit trie root."))),(0,r.kt)("h3",{id:"id-ext_trie_keccak_256_ordered_root"},"B.8.4. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_trie_keccak_256_ordered_root")),(0,r.kt)("p",null,"Compute a 256-bit Keccak trie root formed from the enumerated items."),(0,r.kt)("h4",{id:"id-version-1-prototype-67"},"B.8.4.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_keccak_256_ordered_root_version_1\n    (param $data i64) (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the enumerated items from which the trie root gets formed. The items consist of a SCALE encoded array containing only values, where the corresponding key of each value is the index of the item in the array, starting at 0. The keys are compact encoded integers (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-sc-len-encoding"},"Definition 188"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit trie root result."))),(0,r.kt)("h4",{id:"id-version-2-prototype-12"},"B.8.4.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_keccak_256_ordered_root_version_2\n    (param $data i64) (param $version i32)\n    (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the enumerated items from which the trie root gets formed. The items consist of a SCALE encoded array containing only values, where the corresponding key of each value is the index of the item in the array, starting at 0. The keys are compact encoded integers (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-sc-len-encoding"},"Definition 188"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"version"),": the state version (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-state-version"},"Definition 198"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the buffer containing the 256-bit trie root result."))),(0,r.kt)("h3",{id:"id-ext_trie_blake2_256_verify_proof"},"B.8.5. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_trie_blake2_256_verify_proof")),(0,r.kt)("p",null,"Verifies a key/value pair against a Blake2 256-bit merkle root."),(0,r.kt)("h4",{id:"id-version-1-prototype-68"},"B.8.5.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_blake2_256_verify_proof_version_1\n    (param $root i32) (param $proof i64)\n    (param $key i64) (param $value i64)\n    (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"root"),": a pointer to the 256-bit merkle root.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proof"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an array containing the node proofs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the proof could be successfully verified or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h4",{id:"id-version-2-prototype-13"},"B.8.5.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_blake2_256_verify_proof_version_2\n    (param $root i32) (param $proof i64)\n    (param $key i64) (param $value i64)\n    (param $version i32) (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"root"),": a pointer to the 256-bit merkle root.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proof"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an array containing the node proofs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"version"),": the state version (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-state-version"},"Definition 198"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the proof could be successfully verified or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h3",{id:"id-ext_trie_keccak_256_verify_proof"},"B.8.6. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_trie_keccak_256_verify_proof")),(0,r.kt)("p",null,"Verifies a key/value pair against a Keccak 256-bit merkle root."),(0,r.kt)("h4",{id:"id-version-1-prototype-69"},"B.8.6.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_keccak_256_verify_proof_version_1\n    (param $root i32) (param $proof i64)\n    (param $key i64) (param $value i64)\n    (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"root"),": a pointer to the 256-bit merkle root.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proof"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an array containing the node proofs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the proof could be successfully verified or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h4",{id:"id-version-2-prototype-14"},"B.8.6.2. Version 2 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_trie_keccak_256_verify_proof_version_2\n    (param $root i32) (param $proof i64)\n    (param $key i64) (param $value i64)\n    (param $version i32) (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"root"),": a pointer to the 256-bit merkle root.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"proof"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to an array containing the node proofs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"key"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"value"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"version"),": the state version (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-state-version"},"Definition 198"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"return"),": a value equal to ",(0,r.kt)("em",{parentName:"p"},"1")," if the proof could be successfully verified or a value equal to ",(0,r.kt)("em",{parentName:"p"},"0")," if otherwise."))),(0,r.kt)("h2",{id:"sect-misc-api"},"B.9. Miscellaneous"),(0,r.kt)("p",null,"Interface that provides miscellaneous functions for communicating between the runtime and the node."),(0,r.kt)("h3",{id:"id-ext_misc_print_num"},"B.9.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_misc_print_num")),(0,r.kt)("p",null,"Print a number."),(0,r.kt)("h4",{id:"id-version-1-prototype-70"},"B.9.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_misc_print_num_version_1 (param $value i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value"),": the number to be printed.")),(0,r.kt)("h3",{id:"id-ext_misc_print_utf8"},"B.9.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_misc_print_utf8")),(0,r.kt)("p",null,"Print a valid UTF8 encoded buffer."),(0,r.kt)("h4",{id:"id-version-1-prototype-71"},"B.9.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_misc_print_utf8_version_1 (param $data i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},": a pointer-size (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the valid buffer to be printed.")),(0,r.kt)("h3",{id:"id-ext_misc_print_hex"},"B.9.3. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_misc_print_hex")),(0,r.kt)("p",null,"Print any buffer in hexadecimal representation."),(0,r.kt)("h4",{id:"id-version-1-prototype-72"},"B.9.3.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_misc_print_hex_version_1 (param $data i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the buffer to be printed.")),(0,r.kt)("h3",{id:"id-ext_misc_runtime_version"},"B.9.4. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_misc_runtime_version")),(0,r.kt)("p",null,"Extract the Runtime version of the given Wasm blob by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"Core_version")," (",(0,r.kt)("a",{parentName:"p",href:"chap-runtime-api#defn-rt-core-version"},"Section C.4.1."),"). Returns the SCALE encoded runtime version or ",(0,r.kt)("em",{parentName:"p"},"None")," (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") if the call fails. This function gets primarily used when upgrading Runtimes."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Calling this function is very expensive and should only be done very occasionally. For getting the runtime version, it requires instantiating the Wasm blob (",(0,r.kt)("a",{parentName:"p",href:"chap-state#sect-loading-runtime-code"},"Section 2.6.2."),") and calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"Core_version")," function (",(0,r.kt)("a",{parentName:"p",href:"chap-runtime-api#defn-rt-core-version"},"Section C.4.1."),") in this blob.")),(0,r.kt)("h4",{id:"id-version-1-prototype-73"},"B.9.4.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_misc_runtime_version_version_1 (param $data i64) (result i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"data"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the Wasm blob.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the SCALE encoded ",(0,r.kt)("em",{parentName:"p"},"Option")," value (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-option-type"},"Definition 180"),") containing the Runtime version of the given Wasm blob which is encoded as a byte array."))),(0,r.kt)("h2",{id:"sect-allocator-api"},"B.10. Allocator"),(0,r.kt)("p",null,"The Polkadot Runtime does not include a memory allocator and relies on the Host API for all heap allocations. The beginning of this heap is marked by the ",(0,r.kt)("inlineCode",{parentName:"p"},"__heap_base")," symbol exported by the Polkadot Runtime. No memory should be allocated below that address, to avoid clashes with the stack and data section. The same allocator made accessible by this Host API should be used for any other WASM memory allocations and deallocations outside the runtime e.g. when passing the SCALE-encoded parameters to Runtime API calls."),(0,r.kt)("h3",{id:"id-ext_allocator_malloc"},"B.10.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_allocator_malloc")),(0,r.kt)("p",null,"Allocates the given number of bytes and returns the pointer to that memory location."),(0,r.kt)("h4",{id:"id-version-1-prototype-74"},"B.10.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_allocator_malloc_version_1 (param $size i32) (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"size"),": the size of the buffer to be allocated.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"result"),": a pointer (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the allocated buffer."))),(0,r.kt)("h3",{id:"id-ext_allocator_free"},"B.10.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_allocator_free")),(0,r.kt)("p",null,"Free the given pointer."),(0,r.kt)("h4",{id:"id-version-1-prototype-75"},"B.10.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_allocator_free_version_1 (param $ptr i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ptr"),": a pointer (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer"},"Definition 195"),") to the memory buffer to be freed.")),(0,r.kt)("h2",{id:"sect-logging-api"},"B.11. Logging"),(0,r.kt)("p",null,"Interface that provides functions for logging from within the runtime."),(0,r.kt)("h6",{id:"defn-logging-log-level"},"Definition 207. Log Level"),(0,r.kt)("admonition",{type:"definition"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},"Log Level"),", ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"L")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{L}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"L")))))),", is a varying data type (",(0,r.kt)("a",{parentName:"p",href:"id-cryptography-encoding#defn-varrying-data-type"},"Definition 178"),") and implies the emergency of the log. Possible log levels and the corresponding identifier is as follows:"),(0,r.kt)("div",{parentName:"admonition",className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"L"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mtable",{parentName:"mrow",rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"0"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"Error\xa0=\xa01")))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"1"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"Warn\xa0=\xa02")))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"2"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"Info\xa0=\xa03")))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"3"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"Debug\xa0=\xa04")))),(0,r.kt)("mtr",{parentName:"mtable"},(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mn",{parentName:"mstyle"},"4"))),(0,r.kt)("mtd",{parentName:"mtr"},(0,r.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,r.kt)("mtext",{parentName:"mstyle"},"Trace\xa0=\xa05"))))))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{L}={\\left\\lbrace\\begin{matrix}{0}&\\text{Error = 1}\\\\{1}&\\text{Warn = 2}\\\\{2}&\\text{Info = 3}\\\\{3}&\\text{Debug = 4}\\\\{4}&\\text{Trace = 5}\\end{matrix}\\right.}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"L")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"6em",verticalAlign:"-2.75em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen"},(0,r.kt)("span",{parentName:"span",className:"delimsizing mult"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"3.25em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-1.366em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.216em"}}),(0,r.kt)("span",{parentName:"span",className:"delimsizinginner delim-size4"},(0,r.kt)("span",{parentName:"span"},"\u23a9"))),(0,r.kt)("span",{parentName:"span",style:{top:"-1.358em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.216em"}}),(0,r.kt)("span",{parentName:"span",style:{height:"1.216em",width:"0.8889em"}},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"1.216em",style:{width:"0.8889em"},viewBox:"0 0 888.89 1216",preserveAspectRatio:"xMinYMin"},(0,r.kt)("path",{parentName:"svg",d:"M384 0 H504 V1216 H384z M384 0 H504 V1216 H384z"})))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.216em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.216em"}}),(0,r.kt)("span",{parentName:"span",className:"delimsizinginner delim-size4"},(0,r.kt)("span",{parentName:"span"},"\u23a8"))),(0,r.kt)("span",{parentName:"span",style:{top:"-4.358em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.216em"}}),(0,r.kt)("span",{parentName:"span",style:{height:"1.216em",width:"0.8889em"}},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"1.216em",style:{width:"0.8889em"},viewBox:"0 0 888.89 1216",preserveAspectRatio:"xMinYMin"},(0,r.kt)("path",{parentName:"svg",d:"M384 0 H504 V1216 H384z M384 0 H504 V1216 H384z"})))),(0,r.kt)("span",{parentName:"span",style:{top:"-5.566em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3.216em"}}),(0,r.kt)("span",{parentName:"span",className:"delimsizinginner delim-size4"},(0,r.kt)("span",{parentName:"span"},"\u23a7")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.75em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mtable"},(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"3.25em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-5.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0")))),(0,r.kt)("span",{parentName:"span",style:{top:"-4.21em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"1")))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.01em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"2")))),(0,r.kt)("span",{parentName:"span",style:{top:"-1.81em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"3")))),(0,r.kt)("span",{parentName:"span",style:{top:"-0.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"4"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.75em"}},(0,r.kt)("span",{parentName:"span"}))))),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,r.kt)("span",{parentName:"span",className:"col-align-c"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"3.25em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-5.41em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"Error\xa0=\xa01")))),(0,r.kt)("span",{parentName:"span",style:{top:"-4.21em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"Warn\xa0=\xa02")))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.01em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"Info\xa0=\xa03")))),(0,r.kt)("span",{parentName:"span",style:{top:"-1.81em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"Debug\xa0=\xa04")))),(0,r.kt)("span",{parentName:"span",style:{top:"-0.61em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord"},"Trace\xa0=\xa05"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.75em"}},(0,r.kt)("span",{parentName:"span"}))))))),(0,r.kt)("span",{parentName:"span",className:"mclose nulldelimiter"}))))))))),(0,r.kt)("h3",{id:"id-ext_logging_log"},"B.11.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_logging_log")),(0,r.kt)("p",null,"Request to print a log message on the host. Note that this will be only displayed if the host is enabled to display log messages with given level and target."),(0,r.kt)("h4",{id:"id-version-1-prototype-76"},"B.11.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_logging_log_version_1\n    (param $level i32) (param $target i64) (param $message i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"level"),": the log level (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-logging-log-level"},"Definition 207"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"target"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the string which contains the path, module or location from where the log was executed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"message"),": a pointer-size (",(0,r.kt)("a",{parentName:"p",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the UTF-8 encoded log message."))),(0,r.kt)("h3",{id:"id-ext_logging_max_level"},"B.11.2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_logging_max_level")),(0,r.kt)("p",null,"Returns the max logging level used by the host."),(0,r.kt)("h4",{id:"id-version-1-prototype-max_level"},"B.11.2.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_logging_max_level_version_1\n     (result i32))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"None"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),": the max log level (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-logging-log-level"},"Definition 207"),") used by the host.")),(0,r.kt)("h2",{id:"id-abort-handler"},"B.12. Abort Handler"),(0,r.kt)("p",null,"Interface for aborting the execution of the runtime."),(0,r.kt)("h3",{id:"id-ext_panic_handler_abort_on_panic"},"B.12.1. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ext_panic_handler_abort_on_panic")),(0,r.kt)("p",null,"Aborts the execution of the runtime with a given message. Note that the message will be only displayed if the host is enabled to display those types of messages, which is implementation specific."),(0,r.kt)("h4",{id:"id-version-1-prototype-77"},"B.12.1.1. Version 1 - Prototype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(func $ext_panic_handler_abort_on_panic_version_1\n    (param $message i64))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message"),": a pointer-size (",(0,r.kt)("a",{parentName:"li",href:"chap-host-api#defn-runtime-pointer-size"},"Definition 196"),") to the UTF-8 encoded message.")))}d.isMDXComponent=!0}}]);